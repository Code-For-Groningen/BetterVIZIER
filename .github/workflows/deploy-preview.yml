name: Deploy PR Preview

on:
  pull_request:
    branches: ["main"]
    types: [opened, synchronize, reopened]

# Sets permissions of the GITHUB_TOKEN
permissions:
  contents: write
  pull-requests: write
  actions: write

env:
  CARGO_TERM_COLOR: always

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
        
      - uses: pnpm/action-setup@v4
        with:
          version: 10
          
      - name: Install WASM-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
        
      - name: Build to WASM for preview
        working-directory: ./fitch-proof
        run: pnpm install && pnpm build
        
      - name: Deploy to preview branch
        run: |
          # Configure git
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Create preview branch name
          PREVIEW_BRANCH="preview/pr-${{ github.event.number }}"
          
          # Fetch all branches
          git fetch origin
          
          # Check if preview branch exists and delete it
          if git show-ref --verify --quiet refs/remotes/origin/$PREVIEW_BRANCH; then
            git push origin --delete $PREVIEW_BRANCH || true
          fi
          
          # Create new orphan branch for preview
          git checkout --orphan $PREVIEW_BRANCH
          git rm -rf .
          
          # Copy built files
          cp -r fitch-proof/packages/app/dist/* .
          
          # Add .nojekyll to ensure GitHub Pages serves all files
          touch .nojekyll
          
          # Create a simple index that redirects or shows the preview
          cat > README.md << 'EOF'
          # Preview for PR #${{ github.event.number }}
          
          This is an automated preview deployment for Pull Request #${{ github.event.number }}.
          
          View the application: [Open Preview](./index.html)
          
          **Note:** This preview is automatically generated and will be updated when the PR is updated.
          EOF
          
          # Commit and push
          git add .
          git commit -m "Deploy preview for PR #${{ github.event.number }} - ${{ github.event.pull_request.head.sha }}"
          git push origin $PREVIEW_BRANCH
          
      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const previewUrl = `https://code-for-groningen.github.io/BetterVIZIER/preview/pr-${{ github.event.number }}/`;
            const branchUrl = `https://github.com/Code-For-Groningen/BetterVIZIER/tree/preview/pr-${{ github.event.number }}`;
            
            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('ðŸš€ Preview deployment')
            );
            
            const commentBody = `ðŸš€ **Preview deployment available!**
            
            ðŸ“– **View Preview:** ${previewUrl}
            ðŸŒ³ **Preview Branch:** [preview/pr-${{ github.event.number }}](${branchUrl})
            
            This preview will be updated automatically when you push new commits to this PR.
            
            > **Note:** If this is the first time setting up preview deployments, you may need to configure GitHub Pages to serve from the preview branch. The repository maintainer can do this in Settings â†’ Pages.`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }