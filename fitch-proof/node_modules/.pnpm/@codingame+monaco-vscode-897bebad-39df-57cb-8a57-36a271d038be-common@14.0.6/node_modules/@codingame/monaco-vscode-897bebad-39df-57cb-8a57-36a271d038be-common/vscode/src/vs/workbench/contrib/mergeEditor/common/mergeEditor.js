
import { localize } from '@codingame/monaco-vscode-api/vscode/vs/nls';
import { RawContextKey } from '@codingame/monaco-vscode-api/vscode/vs/platform/contextkey/common/contextkey';

const ctxIsMergeEditor = ( new RawContextKey('isMergeEditor', false, { type: 'boolean', description: ( localize(7425, 'The editor is a merge editor')) }));
const ctxIsMergeResultEditor = ( new RawContextKey(
 'isMergeResultEditor',
 false,
 { type: 'boolean', description: ( localize(7426, 'The editor is a the result editor of a merge editor.')) }
));
const ctxMergeEditorLayout = ( new RawContextKey(
 'mergeEditorLayout',
 'mixed',
 { type: 'string', description: ( localize(7427, 'The layout mode of a merge editor')) }
));
const ctxMergeEditorShowBase = ( new RawContextKey(
 'mergeEditorShowBase',
 false,
 { type: 'boolean', description: ( localize(7428, 'If the merge editor shows the base version')) }
));
const ctxMergeEditorShowBaseAtTop = ( new RawContextKey(
 'mergeEditorShowBaseAtTop',
 false,
 { type: 'boolean', description: ( localize(7429, 'If base should be shown at the top')) }
));
const ctxMergeEditorShowNonConflictingChanges = ( new RawContextKey(
 'mergeEditorShowNonConflictingChanges',
 false,
 { type: 'boolean', description: ( localize(7430, 'If the merge editor shows non-conflicting changes')) }
));
const ctxMergeBaseUri = ( new RawContextKey('mergeEditorBaseUri', '', { type: 'string', description: ( localize(7431, 'The uri of the baser of a merge editor')) }));
const ctxMergeResultUri = ( new RawContextKey('mergeEditorResultUri', '', { type: 'string', description: ( localize(7432, 'The uri of the result of a merge editor')) }));
const StorageCloseWithConflicts = 'mergeEditorCloseWithConflicts';

export { StorageCloseWithConflicts, ctxIsMergeEditor, ctxIsMergeResultEditor, ctxMergeBaseUri, ctxMergeEditorLayout, ctxMergeEditorShowBase, ctxMergeEditorShowBaseAtTop, ctxMergeEditorShowNonConflictingChanges, ctxMergeResultUri };
