{"version":3,"file":"index.js","sources":["../src/types.ts","../src/utils.ts","../src/decorations.ts","../src/event-emitter.ts","../src/monaco-error-lens.ts","../src/index.ts"],"sourcesContent":["// Monaco types for compatibility\n/**\n * API for a specific editor instance with methods to manipulate decorations, get the current model, cursor position, etc.\n */\nexport interface MonacoEditor {\n  getModel(): MonacoEditorModel | null;\n  getPosition(): { lineNumber: number; column: number } | null;\n  deltaDecorations(oldDecorations: string[], newDecorations: MonacoDecoration[]): string[];\n  onDidChangeCursorPosition(listener: () => void): MonacoDisposable;\n  onDidChangeModel(listener: () => void): MonacoDisposable;\n}\n\nexport interface MonacoEditorModel {\n  uri: { toString(): string };\n}\n\nexport interface MonacoRange {\n  startLineNumber: number;\n  startColumn: number;\n  endLineNumber: number;\n  endColumn: number;\n}\n\nexport interface MonacoMarkerData {\n  startLineNumber: number;\n  startColumn: number;\n  endLineNumber: number;\n  endColumn: number;\n  message: string;\n  severity: number;\n  source?: string;\n  code?: string | number;\n}\n\nexport interface MonacoDecoration {\n  range: MonacoRange;\n  options: MonacoDecorationOptions;\n}\n\nexport interface MonacoDecorationOptions {\n  isWholeLine?: boolean;\n  className?: string;\n  glyphMarginClassName?: string;\n  after?: {\n    content: string;\n    inlineClassName: string;\n  };\n  hoverMessage?: { value: string };\n  stickiness?: number;\n}\n\nexport type MonacoMarkerSeverity = number;\nexport type MonacoDisposable = { dispose(): void };\n\n/**\n * Monaco module namespace with static APIs that work across all editors and models\n */\nexport interface MonacoModule {\n  editor: {\n    getModelMarkers(options: { resource: unknown }): MonacoMarkerData[];\n    onDidChangeMarkers(callback: (resources: { toString(): string }[]) => void): MonacoDisposable;\n  };\n}\n\n/**\n * Configuration options for Monaco Error Lens\n */\nexport interface ErrorLensOptions {\n  /** Enable inline diagnostic messages at the end of lines */\n  enableInlineMessages?: boolean;\n  /** Enable line background highlighting */\n  enableLineHighlights?: boolean;\n  /** Enable gutter icons for diagnostics */\n  enableGutterIcons?: boolean;\n  /** Template for formatting diagnostic messages */\n  messageTemplate?: string;\n  /** Control which lines to show diagnostics for */\n  followCursor?: 'allLines' | 'activeLine';\n  /** Maximum number of characters to show in inline messages */\n  maxMessageLength?: number;\n  /** Maximum number of markers to display per line */\n  maxMarkersPerLine?: number;\n  /** Filter which severity levels to show */\n  severityFilter?: number[];\n  /** Custom colors for different diagnostic severities */\n  colors?: Partial<ErrorLensColors>;\n  /** Delay in milliseconds before updating decorations */\n  updateDelay?: number;\n  /** Enable or disable the extension */\n  enabled?: boolean;\n}\n\n/**\n * Color configuration for different diagnostic severities\n */\nexport interface ErrorLensColors {\n  error: {\n    background: string;\n    foreground: string;\n  };\n  warning: {\n    background: string;\n    foreground: string;\n  };\n  info: {\n    background: string;\n    foreground: string;\n  };\n  hint: {\n    background: string;\n    foreground: string;\n  };\n}\n\n/**\n * Internal configuration state\n */\nexport type ErrorLensConfig = Required<ErrorLensOptions>;\n\n/**\n * Severity levels as constants\n */\nexport const SEVERITY_LEVELS = {\n  ERROR: 8,\n  WARNING: 4,\n  INFO: 2,\n  HINT: 1,\n} as const;\n\n/**\n * CSS class names used by Error Lens\n */\nexport const CSS_CLASSES = {\n  MESSAGE: 'monaco-error-lens-message',\n  LINE: 'monaco-error-lens-line',\n  GUTTER: 'monaco-error-lens-gutter',\n  ERROR: 'error',\n  WARNING: 'warning',\n  INFO: 'info',\n  HINT: 'hint',\n} as const;\n\n/**\n * Default configuration values\n */\nexport const DEFAULT_OPTIONS: Required<ErrorLensOptions> = {\n  enableInlineMessages: true,\n  enableLineHighlights: true,\n  enableGutterIcons: true,\n  messageTemplate: '{message}',\n  followCursor: 'allLines',\n  maxMessageLength: 200,\n  maxMarkersPerLine: 3,\n  severityFilter: [8, 4, 2, 1], // All severities\n  updateDelay: 100,\n  enabled: true,\n  colors: {\n    error: {\n      background: 'rgba(228, 85, 84, 0.15)',\n      foreground: '#ff6464',\n    },\n    warning: {\n      background: 'rgba(255, 148, 47, 0.15)',\n      foreground: '#fa973a',\n    },\n    info: {\n      background: 'rgba(0, 183, 228, 0.15)',\n      foreground: '#00b7e4',\n    },\n    hint: {\n      background: 'rgba(119, 136, 153, 0.15)',\n      foreground: '#778899',\n    },\n  },\n} as const;\n","import type { ErrorLensOptions, MonacoMarkerData } from './types';\nimport { SEVERITY_LEVELS } from './types';\n\n/**\n * Converts Monaco marker severity to a CSS class suffix\n */\nexport function getSeverityClass(severity: number): string {\n  switch (severity) {\n    case SEVERITY_LEVELS.ERROR:\n      return 'error';\n    case SEVERITY_LEVELS.WARNING:\n      return 'warning';\n    case SEVERITY_LEVELS.INFO:\n      return 'info';\n    case SEVERITY_LEVELS.HINT:\n      return 'hint';\n    default:\n      return 'unknown';\n  }\n}\n\n/**\n * Formats a diagnostic message according to the template\n */\nexport function formatMessage(\n  marker: MonacoMarkerData,\n  template: string = '{message}',\n  maxLength?: number,\n): string {\n  let formatted = template\n    .replace('{message}', marker.message ?? '')\n    .replace('{source}', marker.source ?? '')\n    .replace('{code}', marker.code ? String(marker.code) : '');\n\n  if (maxLength && formatted.length > maxLength) {\n    formatted = `${formatted.substring(0, maxLength - 3)}...`;\n  }\n\n  return formatted;\n}\n\n/**\n * Debounce function for performance optimization\n * Returns both the debounced function and a cancel method for cleanup\n */\nexport function debounce<T extends (...args: unknown[]) => void>(\n  func: T,\n  wait: number,\n): {\n  debouncedFn: (...args: Parameters<T>) => void;\n  cancel: () => void;\n} {\n  let timeout: ReturnType<typeof setTimeout> | null = null;\n\n  const debouncedFn = (...args: Parameters<T>) => {\n    if (timeout) {\n      clearTimeout(timeout);\n    }\n    timeout = setTimeout(() => func(...args), wait);\n  };\n\n  const cancel = () => {\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n\n  return { debouncedFn, cancel };\n}\n\n/**\n * Throttle function for performance optimization\n */\nexport function throttle<T extends (...args: unknown[]) => void>(\n  func: T,\n  limit: number,\n): (...args: Parameters<T>) => void {\n  let inThrottle: boolean = false;\n\n  return (...args: Parameters<T>) => {\n    if (!inThrottle) {\n      func(...args);\n      inThrottle = true;\n      setTimeout(() => {\n        inThrottle = false;\n      }, limit);\n    }\n  };\n}\n\n/**\n * Escapes HTML special characters\n */\nexport function escapeHtml(text: string): string {\n  const div = document.createElement('div');\n  div.textContent = text;\n  return div.innerHTML;\n}\n\n/**\n * Creates a unique identifier\n */\nexport function createId(): string {\n  return `error-lens-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n}\n\n/**\n * Merges default options with user options\n */\nexport function mergeOptions(\n  defaultOptions: Required<ErrorLensOptions>,\n  userOptions: ErrorLensOptions = {},\n): Required<ErrorLensOptions> {\n  return {\n    ...defaultOptions,\n    ...userOptions,\n    colors: {\n      error: {\n        background: userOptions.colors?.error?.background ??\n          defaultOptions.colors.error?.background ??\n          'rgba(228, 85, 84, 0.15)',\n        foreground: userOptions.colors?.error?.foreground ??\n          defaultOptions.colors.error?.foreground ??\n          '#ff6464',\n      },\n      warning: {\n        background: userOptions.colors?.warning?.background ??\n          defaultOptions.colors.warning?.background ??\n          'rgba(255, 148, 47, 0.15)',\n        foreground: userOptions.colors?.warning?.foreground ??\n          defaultOptions.colors.warning?.foreground ??\n          '#fa973a',\n      },\n      info: {\n        background: userOptions.colors?.info?.background ??\n          defaultOptions.colors.info?.background ??\n          'rgba(0, 183, 228, 0.15)',\n        foreground: userOptions.colors?.info?.foreground ??\n          defaultOptions.colors.info?.foreground ??\n          '#00b7e4',\n      },\n      hint: {\n        background: userOptions.colors?.hint?.background ??\n          defaultOptions.colors.hint?.background ??\n          'rgba(119, 136, 153, 0.15)',\n        foreground: userOptions.colors?.hint?.foreground ??\n          defaultOptions.colors.hint?.foreground ??\n          '#778899',\n      },\n    },\n  };\n}\n\n\n/**\n * Sorts markers by line number and then by severity\n */\nexport function sortMarkers(markers: MonacoMarkerData[]): MonacoMarkerData[] {\n  return markers.sort((a, b) => {\n    if (a.startLineNumber !== b.startLineNumber) {\n      return a.startLineNumber - b.startLineNumber;\n    }\n    // Higher severity first (Error = 8, Warning = 4, Info = 2, Hint = 1)\n    return b.severity - a.severity;\n  });\n}\n\n/**\n * Groups markers by line number\n */\nexport function groupMarkersByLine(markers: MonacoMarkerData[]): Map<number, MonacoMarkerData[]> {\n  const grouped = new Map<number, MonacoMarkerData[]>();\n\n  for (const marker of markers) {\n    const line = marker.startLineNumber;\n    if (!grouped.has(line)) {\n      grouped.set(line, []);\n    }\n    const lineMarkers = grouped.get(line);\n    if (lineMarkers) {\n      lineMarkers.push(marker);\n    }\n  }\n\n  return grouped;\n}\n\n/**\n * Counts markers by severity\n */\nexport function countMarkersBySeverity(markers: MonacoMarkerData[]): {\n  errors: number;\n  warnings: number;\n  infos: number;\n  hints: number;\n} {\n  return markers.reduce(\n    (acc, marker) => {\n      switch (marker.severity) {\n        case SEVERITY_LEVELS.ERROR:\n          acc.errors++;\n          break;\n        case SEVERITY_LEVELS.WARNING:\n          acc.warnings++;\n          break;\n        case SEVERITY_LEVELS.INFO:\n          acc.infos++;\n          break;\n        case SEVERITY_LEVELS.HINT:\n          acc.hints++;\n          break;\n      }\n      return acc;\n    },\n    { errors: 0, warnings: 0, infos: 0, hints: 0 },\n  );\n}\n","import type {\n  ErrorLensConfig,\n  MonacoEditor,\n  MonacoMarkerData,\n  MonacoDecoration,\n  MonacoDecorationOptions,\n} from './types';\nimport { CSS_CLASSES } from './types';\nimport { getSeverityClass, formatMessage } from './utils';\n\n/**\n * Decoration manager for Monaco Error Lens\n * Handles the creation and management of Monaco editor decorations\n */\nexport class DecorationManager {\n  private decorations: string[] = [];\n  private lastDecorationCount = 0;\n\n  constructor(\n    private editor: MonacoEditor,\n    private config: ErrorLensConfig,\n  ) {}\n\n  /**\n   * Update all decorations based on current markers\n   */\n  public updateDecorations(markers: MonacoMarkerData[]): void {\n    const decorations = this.createDecorations(markers);\n    this.decorations = this.editor.deltaDecorations(this.decorations, decorations);\n    this.lastDecorationCount = decorations.length;\n  }\n\n  /**\n   * Clear all decorations\n   */\n  public clearDecorations(): void {\n    this.decorations = this.editor.deltaDecorations(this.decorations, []);\n    this.lastDecorationCount = 0;\n  }\n\n  /**\n   * Get the current decoration count\n   */\n  public getDecorationCount(): number {\n    return this.lastDecorationCount;\n  }\n\n  /**\n   * Create Monaco decorations from markers\n   */\n  private createDecorations(markers: MonacoMarkerData[]): MonacoDecoration[] {\n    const decorations: MonacoDecoration[] = [];\n    const groupedMarkers = this.groupMarkersByLine(markers);\n\n    for (const [lineNumber, lineMarkers] of groupedMarkers) {\n      const primaryMarker = lineMarkers[0];\n      if (!primaryMarker) continue;\n\n      const decoration = this.createLineDecoration(lineNumber, lineMarkers);\n      if (decoration) {\n        decorations.push(decoration);\n      }\n    }\n\n    return decorations;\n  }\n\n  /**\n   * Create a decoration for an entire line\n   */\n  private createLineDecoration(lineNumber: number, markers: MonacoMarkerData[]): MonacoDecoration | null {\n    const primaryMarker = markers[0];\n    if (!primaryMarker) return null;\n\n    const severityClass = getSeverityClass(primaryMarker.severity);\n    const options: MonacoDecorationOptions = {\n      stickiness: 1, // NeverGrowsWhenTypingAtEdges\n    };\n\n    // Add line highlighting\n    if (this.config.enableLineHighlights) {\n      options.isWholeLine = true;\n      options.className = `${CSS_CLASSES.LINE} ${CSS_CLASSES.LINE}-${severityClass}`;\n    }\n\n    // Add inline message\n    if (this.config.enableInlineMessages) {\n      const formattedMessage = formatMessage(\n        primaryMarker,\n        this.config.messageTemplate,\n        this.config.maxMessageLength,\n      );\n\n      options.after = {\n        content: formattedMessage,\n        inlineClassName: `${CSS_CLASSES.MESSAGE} ${CSS_CLASSES.MESSAGE}-${severityClass}`,\n      };\n    }\n\n    // Add gutter icon\n    if (this.config.enableGutterIcons) {\n      options.glyphMarginClassName = `${CSS_CLASSES.GUTTER} ${CSS_CLASSES.GUTTER}-${severityClass}`;\n    }\n\n\n    // Create range using plain object (compatible with Monaco editor API)\n    return {\n      range: {\n        startLineNumber: lineNumber,\n        startColumn: 1,\n        endLineNumber: lineNumber,\n        endColumn: 1,\n      },\n      options,\n    };\n  }\n\n\n\n\n  /**\n   * Group markers by line number with sorted markers per line\n   */\n  private groupMarkersByLine(markers: MonacoMarkerData[]): Map<number, MonacoMarkerData[]> {\n    const grouped = new Map<number, MonacoMarkerData[]>();\n\n    for (const marker of markers) {\n      const line = marker.startLineNumber;\n      if (!grouped.has(line)) {\n        grouped.set(line, []);\n      }\n      const lineMarkers = grouped.get(line);\n      if (lineMarkers) {\n        lineMarkers.push(marker);\n      }\n    }\n\n    // Sort markers within each line by severity (highest first)\n    for (const lineMarkers of grouped.values()) {\n      lineMarkers.sort((a, b) => b.severity - a.severity);\n    }\n\n    return grouped;\n  }\n\n  /**\n   * Update configuration\n   */\n  public updateConfig(config: ErrorLensConfig): void {\n    this.config = config;\n  }\n}\n","/**\n * Simple event emitter for Monaco Error Lens\n */\n\nexport type EventListener<T = unknown> = (data?: T) => void;\n\n/**\n * Simple event emitter\n */\nexport class SimpleEventEmitter {\n  private listeners = new Map<string, Set<EventListener>>();\n\n  /**\n   * Add an event listener\n   */\n  public on(event: string, listener: EventListener): () => void {\n    if (!this.listeners.has(event)) {\n      this.listeners.set(event, new Set());\n    }\n\n    const eventListeners = this.listeners.get(event);\n    if (eventListeners) {\n      eventListeners.add(listener);\n    }\n\n    // Return unsubscribe function\n    return () => this.off(event, listener);\n  }\n\n  /**\n   * Remove an event listener\n   */\n  public off(event: string, listener: EventListener): void {\n    const eventListeners = this.listeners.get(event);\n    if (eventListeners) {\n      eventListeners.delete(listener);\n      if (eventListeners.size === 0) {\n        this.listeners.delete(event);\n      }\n    }\n  }\n\n  /**\n   * Emit an event\n   */\n  public emit(event: string, data?: unknown): void {\n    const eventListeners = this.listeners.get(event);\n    if (eventListeners) {\n      const listeners = Array.from(eventListeners);\n      listeners.forEach(listener => {\n        try {\n          listener(data);\n        } catch {\n          // Silently handle event listener errors to avoid console spam\n        }\n      });\n    }\n  }\n\n  /**\n   * Remove all listeners\n   */\n  public removeAllListeners(event?: string): void {\n    if (event) {\n      this.listeners.delete(event);\n    } else {\n      this.listeners.clear();\n    }\n  }\n}\n","import type {\n  ErrorLensOptions,\n  ErrorLensConfig,\n  MonacoEditor,\n  MonacoMarkerData,\n  MonacoDisposable,\n  MonacoModule,\n} from './types';\nimport {\n  DEFAULT_OPTIONS,\n} from './types';\nimport {\n  debounce,\n  mergeOptions,\n  sortMarkers,\n  groupMarkersByLine,\n} from './utils';\nimport { DecorationManager } from './decorations';\nimport { SimpleEventEmitter } from './event-emitter';\n\n/**\n * Main Monaco Error Lens class that provides visual diagnostic enhancements\n */\nexport class MonacoErrorLens {\n  private editor: MonacoEditor;\n  private monaco: MonacoModule;\n  private config: ErrorLensConfig;\n  private disposables: MonacoDisposable[] = [];\n  private isDisposed = false;\n  private updateDecorations: () => void;\n  private cancelUpdateDecorations: () => void;\n\n  // Component managers\n  private decorationManager: DecorationManager;\n  private eventEmitter: SimpleEventEmitter;\n\n  constructor(\n    editor: MonacoEditor,\n    monaco: MonacoModule,\n    options: ErrorLensOptions = {},\n  ) {\n    this.editor = editor;\n    this.monaco = monaco;\n    this.config = mergeOptions(DEFAULT_OPTIONS, options);\n\n    // Initialize component managers\n    this.eventEmitter = new SimpleEventEmitter();\n    this.decorationManager = new DecorationManager(this.editor, this.config);\n\n    // Create debounced update function\n    const { debouncedFn, cancel } = debounce(\n      () => this.updateDecorationsInternal(),\n      this.config.updateDelay,\n    );\n    this.updateDecorations = debouncedFn;\n    this.cancelUpdateDecorations = cancel;\n\n    this.initialize();\n  }\n\n  /**\n   * Initialize the Error Lens instance\n   */\n  private initialize(): void {\n    if (!this.config.enabled) return;\n\n    this.injectStyles();\n    this.setupEventListeners();\n\n    // Initial decoration update - only if Monaco is fully initialized\n    if (this.isMonacoInitialized()) {\n      this.updateDecorations();\n    }\n  }\n\n  /**\n   * Check if Monaco Editor is fully initialized with required APIs\n   */\n  private isMonacoInitialized(): boolean {\n    // Check that Monaco APIs are available and editor has a model\n    return !!(\n      typeof this.monaco?.editor?.getModelMarkers === 'function' &&\n      typeof this.monaco?.editor?.onDidChangeMarkers === 'function' &&\n      this.editor.getModel()\n    );\n  }\n\n  /**\n   * Inject CSS styles for Error Lens\n   */\n  private injectStyles(): void {\n    if (typeof document === 'undefined') return;\n\n    const existingStyle = document.getElementById('monaco-error-lens-styles');\n    if (existingStyle) return;\n\n    const style = document.createElement('style');\n    style.id = 'monaco-error-lens-styles';\n    style.textContent = this.generateCSS();\n    document.head.appendChild(style);\n  }\n\n  /**\n   * Generate CSS styles for Error Lens\n   */\n  private generateCSS(): string {\n    const { colors } = this.config;\n\n    // Set CSS custom properties for user-defined colors\n    const customProps = this.generateCustomProperties(colors);\n\n    return `\n      ${customProps}\n      \n      /* Monaco Error Lens Styles */\n      .monaco-error-lens-message {\n        opacity: 0.8;\n        font-style: italic;\n        margin-left: 1ch;\n        pointer-events: none;\n      }\n\n      .monaco-error-lens-line-error {\n        background-color: var(--monaco-error-lens-error-bg, rgba(228, 85, 84, 0.15));\n      }\n\n      .monaco-error-lens-line-warning {\n        background-color: var(--monaco-error-lens-warning-bg, rgba(255, 148, 47, 0.15));\n      }\n\n      .monaco-error-lens-line-info {\n        background-color: var(--monaco-error-lens-info-bg, rgba(0, 183, 228, 0.15));\n      }\n\n      .monaco-error-lens-line-hint {\n        background-color: var(--monaco-error-lens-hint-bg, rgba(119, 136, 153, 0.15));\n      }\n\n      .monaco-error-lens-message-error {\n        color: var(--monaco-error-lens-error-fg, #ff6464);\n      }\n\n      .monaco-error-lens-message-warning {\n        color: var(--monaco-error-lens-warning-fg, #fa973a);\n      }\n\n      .monaco-error-lens-message-info {\n        color: var(--monaco-error-lens-info-fg, #00b7e4);\n      }\n\n      .monaco-error-lens-message-hint {\n        color: var(--monaco-error-lens-hint-fg, #778899);\n      }\n\n      .monaco-error-lens-gutter-error::before {\n        content: '✖';\n        font-weight: bold;\n        font-size: 10px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        width: 14px;\n        height: 14px;\n        border-radius: 50%;\n        background-color: var(--monaco-error-lens-error-fg, #ff6464);\n        color: white;\n        line-height: 1;\n        margin: auto;\n      }\n\n      .monaco-error-lens-gutter-warning::before {\n        content: '⚠';\n        color: var(--monaco-error-lens-warning-fg, #fa973a);\n        font-weight: bold;\n        font-size: 12px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        width: 16px;\n        height: 16px;\n        margin: auto;\n      }\n\n      .monaco-error-lens-gutter-info::before {\n        content: 'ⓘ';\n        color: var(--monaco-error-lens-info-fg, #00b7e4);\n        font-weight: bold;\n        font-size: 12px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        width: 16px;\n        height: 16px;\n        margin: auto;\n      }\n\n      .monaco-error-lens-gutter-hint::before {\n        content: '●';\n        color: var(--monaco-error-lens-hint-fg, #778899);\n        font-weight: bold;\n        font-size: 12px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        width: 16px;\n        height: 16px;\n        margin: auto;\n        opacity: 0.7;\n      }\n    `;\n  }\n\n  /**\n   * Generate CSS custom properties for user-defined colors\n   */\n  private generateCustomProperties(colors: ErrorLensConfig['colors']): string {\n    const props: string[] = [];\n\n    if (colors.error?.background) {\n      props.push(`--monaco-error-lens-error-bg: ${colors.error.background};`);\n    }\n    if (colors.error?.foreground) {\n      props.push(`--monaco-error-lens-error-fg: ${colors.error.foreground};`);\n    }\n    if (colors.warning?.background) {\n      props.push(`--monaco-error-lens-warning-bg: ${colors.warning.background};`);\n    }\n    if (colors.warning?.foreground) {\n      props.push(`--monaco-error-lens-warning-fg: ${colors.warning.foreground};`);\n    }\n    if (colors.info?.background) {\n      props.push(`--monaco-error-lens-info-bg: ${colors.info.background};`);\n    }\n    if (colors.info?.foreground) {\n      props.push(`--monaco-error-lens-info-fg: ${colors.info.foreground};`);\n    }\n    if (colors.hint?.background) {\n      props.push(`--monaco-error-lens-hint-bg: ${colors.hint.background};`);\n    }\n    if (colors.hint?.foreground) {\n      props.push(`--monaco-error-lens-hint-fg: ${colors.hint.foreground};`);\n    }\n\n    return props.length > 0 ? `:root {\\n        ${props.join('\\n        ')}\\n      }` : '';\n  }\n\n  /**\n   * Set up Monaco editor event listeners\n   */\n  private setupEventListeners(): void {\n    if (!this.isMonacoInitialized()) return;\n\n    // Listen for marker changes\n    const markerListener = this.monaco.editor.onDidChangeMarkers(\n      (resources: { toString(): string }[]) => {\n        const model = this.editor.getModel();\n        if (model && resources.some(resource => resource.toString() === model.uri.toString())) {\n          this.updateDecorations();\n        }\n      },\n    );\n    this.disposables.push(markerListener);\n\n    // Listen for cursor position changes if following cursor\n    if (this.config.followCursor === 'activeLine') {\n      const cursorListener = this.editor.onDidChangeCursorPosition(() => {\n        this.updateDecorations();\n      });\n      this.disposables.push(cursorListener);\n    }\n\n    // Listen for model changes\n    const modelListener = this.editor.onDidChangeModel(() => {\n      this.clearDecorations();\n      this.updateDecorations();\n    });\n    this.disposables.push(modelListener);\n  }\n\n  /**\n   * Update decorations based on current markers\n   */\n  private updateDecorationsInternal(): void {\n    if (this.isDisposed || !this.config.enabled) return;\n\n    const model = this.editor.getModel();\n    if (!model) return;\n\n    if (!this.isMonacoInitialized()) return;\n\n    try {\n      // Get current markers\n      const markers = this.monaco.editor.getModelMarkers({\n        resource: model.uri,\n      });\n\n      const markersArray = markers ?? [];\n\n      // Filter markers\n      const filteredMarkers = this.filterMarkers(markersArray);\n\n      // Update decorations through decoration manager\n      this.decorationManager.updateDecorations(filteredMarkers);\n\n      // Emit decorations updated event\n      this.eventEmitter.emit('decorations-updated', {\n        decorationCount: this.decorationManager.getDecorationCount(),\n        markerCount: markersArray.length,\n        timestamp: new Date(),\n      });\n\n    } catch (error) {\n      this.eventEmitter.emit('error', {\n        error: error instanceof Error ? error : new Error(String(error)),\n        context: 'updateDecorationsInternal',\n        timestamp: new Date(),\n      });\n    }\n  }\n\n  /**\n   * Filter markers based on configuration\n   */\n  private filterMarkers(markers: MonacoMarkerData[]): MonacoMarkerData[] {\n    let filtered = [...markers];\n\n    // Filter by severity\n    filtered = filtered.filter(marker =>\n      this.config.severityFilter.includes(marker.severity),\n    );\n\n    // Sort markers by line and severity\n    filtered = sortMarkers(filtered);\n\n    // Apply cursor-based filtering\n    if (this.config.followCursor === 'activeLine') {\n      const currentLine = this.editor.getPosition()?.lineNumber;\n      if (currentLine) {\n        filtered = filtered.filter(marker => marker.startLineNumber === currentLine);\n      }\n    }\n\n    // Limit markers per line\n    if (this.config.maxMarkersPerLine > 0) {\n      const lineGroups = groupMarkersByLine(filtered);\n      filtered = [];\n\n      for (const lineMarkers of lineGroups.values()) {\n        const limited = lineMarkers.slice(0, this.config.maxMarkersPerLine);\n        filtered.push(...limited);\n      }\n    }\n\n    return filtered;\n  }\n\n  /**\n   * Clear all decorations\n   */\n  private clearDecorations(): void {\n    this.decorationManager.clearDecorations();\n  }\n\n  /**\n   * Update configuration options\n   */\n  public updateOptions(newOptions: Partial<ErrorLensOptions>): void {\n    const oldEnabled = this.config.enabled;\n\n    this.config = {\n      ...this.config,\n      ...mergeOptions(this.config, newOptions),\n    };\n\n    // Update component managers\n    this.decorationManager.updateConfig(this.config);\n\n    // Update debounce delay if changed\n    if (newOptions.updateDelay !== undefined) {\n      // Cancel existing debounced function\n      this.cancelUpdateDecorations();\n\n      const { debouncedFn, cancel } = debounce(\n        () => this.updateDecorationsInternal(),\n        this.config.updateDelay,\n      );\n      this.updateDecorations = debouncedFn;\n      this.cancelUpdateDecorations = cancel;\n    }\n\n    // Re-initialize if needed\n    if (newOptions.enabled !== undefined) {\n      if (newOptions.enabled && !oldEnabled) {\n        this.initialize();\n        this.eventEmitter.emit('status-changed', { enabled: true, timestamp: new Date() });\n      } else if (!newOptions.enabled && oldEnabled) {\n        this.clearDecorations();\n        this.eventEmitter.emit('status-changed', { enabled: false, timestamp: new Date() });\n      }\n    } else {\n      this.updateDecorations();\n    }\n\n    this.eventEmitter.emit('config-updated', { config: this.config, timestamp: new Date() });\n  }\n\n  /**\n   * Enable the Error Lens\n   */\n  public enable(): void {\n    if (!this.config.enabled) {\n      this.config.enabled = true;\n      this.initialize();\n    }\n  }\n\n  /**\n   * Disable the Error Lens\n   */\n  public disable(): void {\n    if (this.config.enabled) {\n      this.config.enabled = false;\n      this.clearDecorations();\n    }\n  }\n\n  /**\n   * Toggle Error Lens on/off\n   */\n  public toggle(): boolean {\n    if (this.config.enabled) {\n      this.disable();\n    } else {\n      this.enable();\n    }\n    return this.config.enabled;\n  }\n\n  /**\n   * Force update decorations immediately\n   */\n  public refresh(): void {\n    this.updateDecorationsInternal();\n  }\n\n  /**\n   * Get current configuration\n   */\n  public getConfig(): Readonly<ErrorLensConfig> {\n    return { ...this.config };\n  }\n\n  /**\n   * Get the event emitter for listening to Error Lens events\n   */\n  public getEventEmitter(): SimpleEventEmitter {\n    return this.eventEmitter;\n  }\n\n  /**\n   * Check if Error Lens is currently active\n   */\n  public isActive(): boolean {\n    return !this.isDisposed && this.config.enabled;\n  }\n\n  /**\n   * Dispose of the Error Lens instance\n   */\n  public dispose(): void {\n    if (this.isDisposed) return;\n\n    this.isDisposed = true;\n\n    // Cancel any pending debounced updates\n    this.cancelUpdateDecorations();\n\n    this.clearDecorations();\n\n    // Dispose of all event listeners\n    this.disposables.forEach(disposable => disposable.dispose());\n    this.disposables = [];\n\n    // Clean up event emitter\n    this.eventEmitter.removeAllListeners();\n  }\n}\n","/**\n * Monaco Error Lens - Visual diagnostic enhancements for Monaco Editor\n *\n * This package provides Error Lens functionality for Monaco Editor, making\n * diagnostics more visually prominent through inline messages, line highlighting,\n * and gutter icons.\n *\n * @packageDocumentation\n */\n\n// Main exports\nexport { MonacoErrorLens } from './monaco-error-lens';\n\n// Type exports\nexport type {\n  ErrorLensOptions,\n  ErrorLensConfig,\n  ErrorLensColors,\n  MonacoEditor,\n  MonacoMarkerData,\n  MonacoDisposable,\n  MonacoModule,\n} from './types';\n\n// Import types for internal use\nimport type { ErrorLensOptions } from './types';\nimport { MonacoErrorLens } from './monaco-error-lens';\n\n// Utility exports\nexport {\n  getSeverityClass,\n  formatMessage,\n  debounce,\n  throttle,\n  mergeOptions,\n  sortMarkers,\n  groupMarkersByLine,\n  countMarkersBySeverity,\n} from './utils';\n\n// Component exports\nexport { DecorationManager } from './decorations';\nexport { SimpleEventEmitter } from './event-emitter';\n\n// Constants\nexport {\n  DEFAULT_OPTIONS,\n  SEVERITY_LEVELS,\n  CSS_CLASSES,\n} from './types';\n\n// Version information\nexport const VERSION = '1.0.0';\n\n/**\n * Check if Monaco Editor is available\n */\nexport function isMonacoAvailable(): boolean {\n  return typeof window !== 'undefined' && !!(window as { monaco?: unknown }).monaco;\n}\n\n/**\n * Get Monaco Editor instance (if available)\n */\nexport function getMonaco(): unknown | null {\n  return typeof window !== 'undefined' ? (window as { monaco?: unknown }).monaco ?? null : null;\n}\n\n/**\n * Default factory function for easy instantiation\n */\nexport function createErrorLens(\n  editor: import('./types').MonacoEditor,\n  monaco: import('./types').MonacoModule,\n  options?: ErrorLensOptions,\n): MonacoErrorLens {\n  return new MonacoErrorLens(editor, monaco, options);\n}\n\n/**\n * Quick setup function that applies default configuration\n */\nexport function setupErrorLens(\n  editor: import('./types').MonacoEditor,\n  monaco: import('./types').MonacoModule,\n  options?: ErrorLensOptions,\n): MonacoErrorLens {\n  const errorLens = new MonacoErrorLens(editor, monaco, {\n    enableInlineMessages: true,\n    enableLineHighlights: true,\n    enableGutterIcons: true,\n    followCursor: 'allLines',\n    ...options,\n  });\n\n  return errorLens;\n}\n\n/**\n * Create Error Lens with minimal features for better performance\n */\nexport function createMinimalErrorLens(\n  editor: import('./types').MonacoEditor,\n  monaco: import('./types').MonacoModule,\n  options?: ErrorLensOptions,\n): MonacoErrorLens {\n  return new MonacoErrorLens(editor, monaco, {\n    enableInlineMessages: true,\n    enableLineHighlights: false,\n    enableGutterIcons: false,\n    maxMarkersPerLine: 1,\n    followCursor: 'activeLine',\n    ...options,\n  });\n}\n\n// Default export\nexport default MonacoErrorLens;\n"],"names":["MonacoErrorLens"],"mappings":"AA0HO,MAAM,kBAAkB;AAAA,EAC7B,OAAO;AAAA,EACP,SAAS;AAAA,EACT,MAAM;AAAA,EACN,MAAM;AACR;AAKO,MAAM,cAAc;AAAA,EACzB,SAAS;AAAA,EACT,MAAM;AAAA,EACN,QAAQ;AAAA,EACR,OAAO;AAAA,EACP,SAAS;AAAA,EACT,MAAM;AAAA,EACN,MAAM;AACR;AAKO,MAAM,kBAA8C;AAAA,EACzD,sBAAsB;AAAA,EACtB,sBAAsB;AAAA,EACtB,mBAAmB;AAAA,EACnB,iBAAiB;AAAA,EACjB,cAAc;AAAA,EACd,kBAAkB;AAAA,EAClB,mBAAmB;AAAA,EACnB,gBAAgB,CAAC,GAAG,GAAG,GAAG,CAAC;AAAA;AAAA,EAC3B,aAAa;AAAA,EACb,SAAS;AAAA,EACT,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,YAAY;AAAA,MACZ,YAAY;AAAA,IACd;AAAA,IACA,SAAS;AAAA,MACP,YAAY;AAAA,MACZ,YAAY;AAAA,IACd;AAAA,IACA,MAAM;AAAA,MACJ,YAAY;AAAA,MACZ,YAAY;AAAA,IACd;AAAA,IACA,MAAM;AAAA,MACJ,YAAY;AAAA,MACZ,YAAY;AAAA,IAAA;AAAA,EACd;AAEJ;ACxKO,SAAS,iBAAiB,UAA0B;AACzD,UAAQ,UAAU;AAAA,IAChB,KAAK,gBAAgB;AACZ,aAAA;AAAA,IACT,KAAK,gBAAgB;AACZ,aAAA;AAAA,IACT,KAAK,gBAAgB;AACZ,aAAA;AAAA,IACT,KAAK,gBAAgB;AACZ,aAAA;AAAA,IACT;AACS,aAAA;AAAA,EAAA;AAEb;AAKO,SAAS,cACd,QACA,WAAmB,aACnB,WACQ;AACJ,MAAA,YAAY,SACb,QAAQ,aAAa,OAAO,WAAW,EAAE,EACzC,QAAQ,YAAY,OAAO,UAAU,EAAE,EACvC,QAAQ,UAAU,OAAO,OAAO,OAAO,OAAO,IAAI,IAAI,EAAE;AAEvD,MAAA,aAAa,UAAU,SAAS,WAAW;AAC7C,gBAAY,GAAG,UAAU,UAAU,GAAG,YAAY,CAAC,CAAC;AAAA,EAAA;AAG/C,SAAA;AACT;AAMgB,SAAA,SACd,MACA,MAIA;AACA,MAAI,UAAgD;AAE9C,QAAA,cAAc,IAAI,SAAwB;AAC9C,QAAI,SAAS;AACX,mBAAa,OAAO;AAAA,IAAA;AAEtB,cAAU,WAAW,MAAM,KAAK,GAAG,IAAI,GAAG,IAAI;AAAA,EAChD;AAEA,QAAM,SAAS,MAAM;AACnB,QAAI,SAAS;AACX,mBAAa,OAAO;AACV,gBAAA;AAAA,IAAA;AAAA,EAEd;AAEO,SAAA,EAAE,aAAa,OAAO;AAC/B;AAKgB,SAAA,SACd,MACA,OACkC;AAClC,MAAI,aAAsB;AAE1B,SAAO,IAAI,SAAwB;AACjC,QAAI,CAAC,YAAY;AACf,WAAK,GAAG,IAAI;AACC,mBAAA;AACb,iBAAW,MAAM;AACF,qBAAA;AAAA,SACZ,KAAK;AAAA,IAAA;AAAA,EAEZ;AACF;AAqBO,SAAS,aACd,gBACA,cAAgC,IACJ;AACrB,SAAA;AAAA,IACL,GAAG;AAAA,IACH,GAAG;AAAA,IACH,QAAQ;AAAA,MACN,OAAO;AAAA,QACL,YAAY,YAAY,QAAQ,OAAO,cACrC,eAAe,OAAO,OAAO,cAC7B;AAAA,QACF,YAAY,YAAY,QAAQ,OAAO,cACrC,eAAe,OAAO,OAAO,cAC7B;AAAA,MACJ;AAAA,MACA,SAAS;AAAA,QACP,YAAY,YAAY,QAAQ,SAAS,cACvC,eAAe,OAAO,SAAS,cAC/B;AAAA,QACF,YAAY,YAAY,QAAQ,SAAS,cACvC,eAAe,OAAO,SAAS,cAC/B;AAAA,MACJ;AAAA,MACA,MAAM;AAAA,QACJ,YAAY,YAAY,QAAQ,MAAM,cACpC,eAAe,OAAO,MAAM,cAC5B;AAAA,QACF,YAAY,YAAY,QAAQ,MAAM,cACpC,eAAe,OAAO,MAAM,cAC5B;AAAA,MACJ;AAAA,MACA,MAAM;AAAA,QACJ,YAAY,YAAY,QAAQ,MAAM,cACpC,eAAe,OAAO,MAAM,cAC5B;AAAA,QACF,YAAY,YAAY,QAAQ,MAAM,cACpC,eAAe,OAAO,MAAM,cAC5B;AAAA,MAAA;AAAA,IACJ;AAAA,EAEJ;AACF;AAMO,SAAS,YAAY,SAAiD;AAC3E,SAAO,QAAQ,KAAK,CAAC,GAAG,MAAM;AACxB,QAAA,EAAE,oBAAoB,EAAE,iBAAiB;AACpC,aAAA,EAAE,kBAAkB,EAAE;AAAA,IAAA;AAGxB,WAAA,EAAE,WAAW,EAAE;AAAA,EAAA,CACvB;AACH;AAKO,SAAS,mBAAmB,SAA8D;AACzF,QAAA,8BAAc,IAAgC;AAEpD,aAAW,UAAU,SAAS;AAC5B,UAAM,OAAO,OAAO;AACpB,QAAI,CAAC,QAAQ,IAAI,IAAI,GAAG;AACd,cAAA,IAAI,MAAM,EAAE;AAAA,IAAA;AAEhB,UAAA,cAAc,QAAQ,IAAI,IAAI;AACpC,QAAI,aAAa;AACf,kBAAY,KAAK,MAAM;AAAA,IAAA;AAAA,EACzB;AAGK,SAAA;AACT;AAKO,SAAS,uBAAuB,SAKrC;AACA,SAAO,QAAQ;AAAA,IACb,CAAC,KAAK,WAAW;AACf,cAAQ,OAAO,UAAU;AAAA,QACvB,KAAK,gBAAgB;AACf,cAAA;AACJ;AAAA,QACF,KAAK,gBAAgB;AACf,cAAA;AACJ;AAAA,QACF,KAAK,gBAAgB;AACf,cAAA;AACJ;AAAA,QACF,KAAK,gBAAgB;AACf,cAAA;AACJ;AAAA,MAAA;AAEG,aAAA;AAAA,IACT;AAAA,IACA,EAAE,QAAQ,GAAG,UAAU,GAAG,OAAO,GAAG,OAAO,EAAE;AAAA,EAC/C;AACF;AC3MO,MAAM,kBAAkB;AAAA,EAI7B,YACU,QACA,QACR;AAFQ,SAAA,SAAA;AACA,SAAA,SAAA;AALV,SAAQ,cAAwB,CAAC;AACjC,SAAQ,sBAAsB;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAUvB,kBAAkB,SAAmC;AACpD,UAAA,cAAc,KAAK,kBAAkB,OAAO;AAClD,SAAK,cAAc,KAAK,OAAO,iBAAiB,KAAK,aAAa,WAAW;AAC7E,SAAK,sBAAsB,YAAY;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMlC,mBAAyB;AAC9B,SAAK,cAAc,KAAK,OAAO,iBAAiB,KAAK,aAAa,EAAE;AACpE,SAAK,sBAAsB;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMtB,qBAA6B;AAClC,WAAO,KAAK;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMN,kBAAkB,SAAiD;AACzE,UAAM,cAAkC,CAAC;AACnC,UAAA,iBAAiB,KAAK,mBAAmB,OAAO;AAEtD,eAAW,CAAC,YAAY,WAAW,KAAK,gBAAgB;AAChD,YAAA,gBAAgB,YAAY,CAAC;AACnC,UAAI,CAAC,cAAe;AAEpB,YAAM,aAAa,KAAK,qBAAqB,YAAY,WAAW;AACpE,UAAI,YAAY;AACd,oBAAY,KAAK,UAAU;AAAA,MAAA;AAAA,IAC7B;AAGK,WAAA;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMD,qBAAqB,YAAoB,SAAsD;AAC/F,UAAA,gBAAgB,QAAQ,CAAC;AAC3B,QAAA,CAAC,cAAsB,QAAA;AAErB,UAAA,gBAAgB,iBAAiB,cAAc,QAAQ;AAC7D,UAAM,UAAmC;AAAA,MACvC,YAAY;AAAA;AAAA,IACd;AAGI,QAAA,KAAK,OAAO,sBAAsB;AACpC,cAAQ,cAAc;AACd,cAAA,YAAY,GAAG,YAAY,IAAI,IAAI,YAAY,IAAI,IAAI,aAAa;AAAA,IAAA;AAI1E,QAAA,KAAK,OAAO,sBAAsB;AACpC,YAAM,mBAAmB;AAAA,QACvB;AAAA,QACA,KAAK,OAAO;AAAA,QACZ,KAAK,OAAO;AAAA,MACd;AAEA,cAAQ,QAAQ;AAAA,QACd,SAAS;AAAA,QACT,iBAAiB,GAAG,YAAY,OAAO,IAAI,YAAY,OAAO,IAAI,aAAa;AAAA,MACjF;AAAA,IAAA;AAIE,QAAA,KAAK,OAAO,mBAAmB;AACzB,cAAA,uBAAuB,GAAG,YAAY,MAAM,IAAI,YAAY,MAAM,IAAI,aAAa;AAAA,IAAA;AAKtF,WAAA;AAAA,MACL,OAAO;AAAA,QACL,iBAAiB;AAAA,QACjB,aAAa;AAAA,QACb,eAAe;AAAA,QACf,WAAW;AAAA,MACb;AAAA,MACA;AAAA,IACF;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EASM,mBAAmB,SAA8D;AACjF,UAAA,8BAAc,IAAgC;AAEpD,eAAW,UAAU,SAAS;AAC5B,YAAM,OAAO,OAAO;AACpB,UAAI,CAAC,QAAQ,IAAI,IAAI,GAAG;AACd,gBAAA,IAAI,MAAM,EAAE;AAAA,MAAA;AAEhB,YAAA,cAAc,QAAQ,IAAI,IAAI;AACpC,UAAI,aAAa;AACf,oBAAY,KAAK,MAAM;AAAA,MAAA;AAAA,IACzB;AAIS,eAAA,eAAe,QAAQ,UAAU;AAC1C,kBAAY,KAAK,CAAC,GAAG,MAAM,EAAE,WAAW,EAAE,QAAQ;AAAA,IAAA;AAG7C,WAAA;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMF,aAAa,QAA+B;AACjD,SAAK,SAAS;AAAA,EAAA;AAElB;AC9IO,MAAM,mBAAmB;AAAA,EAAzB,cAAA;AACG,SAAA,gCAAgB,IAAgC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAKjD,GAAG,OAAe,UAAqC;AAC5D,QAAI,CAAC,KAAK,UAAU,IAAI,KAAK,GAAG;AAC9B,WAAK,UAAU,IAAI,OAAO,oBAAI,KAAK;AAAA,IAAA;AAGrC,UAAM,iBAAiB,KAAK,UAAU,IAAI,KAAK;AAC/C,QAAI,gBAAgB;AAClB,qBAAe,IAAI,QAAQ;AAAA,IAAA;AAI7B,WAAO,MAAM,KAAK,IAAI,OAAO,QAAQ;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMhC,IAAI,OAAe,UAA+B;AACvD,UAAM,iBAAiB,KAAK,UAAU,IAAI,KAAK;AAC/C,QAAI,gBAAgB;AAClB,qBAAe,OAAO,QAAQ;AAC1B,UAAA,eAAe,SAAS,GAAG;AACxB,aAAA,UAAU,OAAO,KAAK;AAAA,MAAA;AAAA,IAC7B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAMK,KAAK,OAAe,MAAsB;AAC/C,UAAM,iBAAiB,KAAK,UAAU,IAAI,KAAK;AAC/C,QAAI,gBAAgB;AACZ,YAAA,YAAY,MAAM,KAAK,cAAc;AAC3C,gBAAU,QAAQ,CAAY,aAAA;AACxB,YAAA;AACF,mBAAS,IAAI;AAAA,QAAA,QACP;AAAA,QAAA;AAAA,MAER,CACD;AAAA,IAAA;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAMK,mBAAmB,OAAsB;AAC9C,QAAI,OAAO;AACJ,WAAA,UAAU,OAAO,KAAK;AAAA,IAAA,OACtB;AACL,WAAK,UAAU,MAAM;AAAA,IAAA;AAAA,EACvB;AAEJ;AC9CO,MAAM,gBAAgB;AAAA,EAa3B,YACE,QACA,QACA,UAA4B,CAAA,GAC5B;AAbF,SAAQ,cAAkC,CAAC;AAC3C,SAAQ,aAAa;AAanB,SAAK,SAAS;AACd,SAAK,SAAS;AACT,SAAA,SAAS,aAAa,iBAAiB,OAAO;AAG9C,SAAA,eAAe,IAAI,mBAAmB;AAC3C,SAAK,oBAAoB,IAAI,kBAAkB,KAAK,QAAQ,KAAK,MAAM;AAGjE,UAAA,EAAE,aAAa,OAAA,IAAW;AAAA,MAC9B,MAAM,KAAK,0BAA0B;AAAA,MACrC,KAAK,OAAO;AAAA,IACd;AACA,SAAK,oBAAoB;AACzB,SAAK,0BAA0B;AAE/B,SAAK,WAAW;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMV,aAAmB;AACrB,QAAA,CAAC,KAAK,OAAO,QAAS;AAE1B,SAAK,aAAa;AAClB,SAAK,oBAAoB;AAGrB,QAAA,KAAK,uBAAuB;AAC9B,WAAK,kBAAkB;AAAA,IAAA;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA,EAMM,sBAA+B;AAErC,WAAO,CAAC,EACN,OAAO,KAAK,QAAQ,QAAQ,oBAAoB,cAChD,OAAO,KAAK,QAAQ,QAAQ,uBAAuB,cACnD,KAAK,OAAO;EAAS;AAAA;AAAA;AAAA;AAAA,EAOjB,eAAqB;AACvB,QAAA,OAAO,aAAa,YAAa;AAE/B,UAAA,gBAAgB,SAAS,eAAe,0BAA0B;AACxE,QAAI,cAAe;AAEb,UAAA,QAAQ,SAAS,cAAc,OAAO;AAC5C,UAAM,KAAK;AACL,UAAA,cAAc,KAAK,YAAY;AAC5B,aAAA,KAAK,YAAY,KAAK;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMzB,cAAsB;AACtB,UAAA,EAAE,WAAW,KAAK;AAGlB,UAAA,cAAc,KAAK,yBAAyB,MAAM;AAEjD,WAAA;AAAA,QACH,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAuGT,yBAAyB,QAA2C;AAC1E,UAAM,QAAkB,CAAC;AAErB,QAAA,OAAO,OAAO,YAAY;AAC5B,YAAM,KAAK,iCAAiC,OAAO,MAAM,UAAU,GAAG;AAAA,IAAA;AAEpE,QAAA,OAAO,OAAO,YAAY;AAC5B,YAAM,KAAK,iCAAiC,OAAO,MAAM,UAAU,GAAG;AAAA,IAAA;AAEpE,QAAA,OAAO,SAAS,YAAY;AAC9B,YAAM,KAAK,mCAAmC,OAAO,QAAQ,UAAU,GAAG;AAAA,IAAA;AAExE,QAAA,OAAO,SAAS,YAAY;AAC9B,YAAM,KAAK,mCAAmC,OAAO,QAAQ,UAAU,GAAG;AAAA,IAAA;AAExE,QAAA,OAAO,MAAM,YAAY;AAC3B,YAAM,KAAK,gCAAgC,OAAO,KAAK,UAAU,GAAG;AAAA,IAAA;AAElE,QAAA,OAAO,MAAM,YAAY;AAC3B,YAAM,KAAK,gCAAgC,OAAO,KAAK,UAAU,GAAG;AAAA,IAAA;AAElE,QAAA,OAAO,MAAM,YAAY;AAC3B,YAAM,KAAK,gCAAgC,OAAO,KAAK,UAAU,GAAG;AAAA,IAAA;AAElE,QAAA,OAAO,MAAM,YAAY;AAC3B,YAAM,KAAK,gCAAgC,OAAO,KAAK,UAAU,GAAG;AAAA,IAAA;AAG/D,WAAA,MAAM,SAAS,IAAI;AAAA,UAAoB,MAAM,KAAK,YAAY,CAAC;AAAA,WAAc;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM9E,sBAA4B;AAC9B,QAAA,CAAC,KAAK,sBAAuB;AAG3B,UAAA,iBAAiB,KAAK,OAAO,OAAO;AAAA,MACxC,CAAC,cAAwC;AACjC,cAAA,QAAQ,KAAK,OAAO,SAAS;AAC/B,YAAA,SAAS,UAAU,KAAK,CAAY,aAAA,SAAS,SAAS,MAAM,MAAM,IAAI,SAAU,CAAA,GAAG;AACrF,eAAK,kBAAkB;AAAA,QAAA;AAAA,MACzB;AAAA,IAEJ;AACK,SAAA,YAAY,KAAK,cAAc;AAGhC,QAAA,KAAK,OAAO,iBAAiB,cAAc;AAC7C,YAAM,iBAAiB,KAAK,OAAO,0BAA0B,MAAM;AACjE,aAAK,kBAAkB;AAAA,MAAA,CACxB;AACI,WAAA,YAAY,KAAK,cAAc;AAAA,IAAA;AAItC,UAAM,gBAAgB,KAAK,OAAO,iBAAiB,MAAM;AACvD,WAAK,iBAAiB;AACtB,WAAK,kBAAkB;AAAA,IAAA,CACxB;AACI,SAAA,YAAY,KAAK,aAAa;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM7B,4BAAkC;AACxC,QAAI,KAAK,cAAc,CAAC,KAAK,OAAO,QAAS;AAEvC,UAAA,QAAQ,KAAK,OAAO,SAAS;AACnC,QAAI,CAAC,MAAO;AAER,QAAA,CAAC,KAAK,sBAAuB;AAE7B,QAAA;AAEF,YAAM,UAAU,KAAK,OAAO,OAAO,gBAAgB;AAAA,QACjD,UAAU,MAAM;AAAA,MAAA,CACjB;AAEK,YAAA,eAAe,WAAW,CAAC;AAG3B,YAAA,kBAAkB,KAAK,cAAc,YAAY;AAGlD,WAAA,kBAAkB,kBAAkB,eAAe;AAGnD,WAAA,aAAa,KAAK,uBAAuB;AAAA,QAC5C,iBAAiB,KAAK,kBAAkB,mBAAmB;AAAA,QAC3D,aAAa,aAAa;AAAA,QAC1B,+BAAe,KAAK;AAAA,MAAA,CACrB;AAAA,aAEM,OAAO;AACT,WAAA,aAAa,KAAK,SAAS;AAAA,QAC9B,OAAO,iBAAiB,QAAQ,QAAQ,IAAI,MAAM,OAAO,KAAK,CAAC;AAAA,QAC/D,SAAS;AAAA,QACT,+BAAe,KAAK;AAAA,MAAA,CACrB;AAAA,IAAA;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAMM,cAAc,SAAiD;AACjE,QAAA,WAAW,CAAC,GAAG,OAAO;AAG1B,eAAW,SAAS;AAAA,MAAO,YACzB,KAAK,OAAO,eAAe,SAAS,OAAO,QAAQ;AAAA,IACrD;AAGA,eAAW,YAAY,QAAQ;AAG3B,QAAA,KAAK,OAAO,iBAAiB,cAAc;AAC7C,YAAM,cAAc,KAAK,OAAO,YAAe,GAAA;AAC/C,UAAI,aAAa;AACf,mBAAW,SAAS,OAAO,CAAU,WAAA,OAAO,oBAAoB,WAAW;AAAA,MAAA;AAAA,IAC7E;AAIE,QAAA,KAAK,OAAO,oBAAoB,GAAG;AAC/B,YAAA,aAAa,mBAAmB,QAAQ;AAC9C,iBAAW,CAAC;AAED,iBAAA,eAAe,WAAW,UAAU;AAC7C,cAAM,UAAU,YAAY,MAAM,GAAG,KAAK,OAAO,iBAAiB;AACzD,iBAAA,KAAK,GAAG,OAAO;AAAA,MAAA;AAAA,IAC1B;AAGK,WAAA;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMD,mBAAyB;AAC/B,SAAK,kBAAkB,iBAAiB;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMnC,cAAc,YAA6C;AAC1D,UAAA,aAAa,KAAK,OAAO;AAE/B,SAAK,SAAS;AAAA,MACZ,GAAG,KAAK;AAAA,MACR,GAAG,aAAa,KAAK,QAAQ,UAAU;AAAA,IACzC;AAGK,SAAA,kBAAkB,aAAa,KAAK,MAAM;AAG3C,QAAA,WAAW,gBAAgB,QAAW;AAExC,WAAK,wBAAwB;AAEvB,YAAA,EAAE,aAAa,OAAA,IAAW;AAAA,QAC9B,MAAM,KAAK,0BAA0B;AAAA,QACrC,KAAK,OAAO;AAAA,MACd;AACA,WAAK,oBAAoB;AACzB,WAAK,0BAA0B;AAAA,IAAA;AAI7B,QAAA,WAAW,YAAY,QAAW;AAChC,UAAA,WAAW,WAAW,CAAC,YAAY;AACrC,aAAK,WAAW;AACX,aAAA,aAAa,KAAK,kBAAkB,EAAE,SAAS,MAAM,WAAW,oBAAI,KAAK,GAAG;AAAA,MACxE,WAAA,CAAC,WAAW,WAAW,YAAY;AAC5C,aAAK,iBAAiB;AACjB,aAAA,aAAa,KAAK,kBAAkB,EAAE,SAAS,OAAO,WAAW,oBAAI,KAAK,GAAG;AAAA,MAAA;AAAA,IACpF,OACK;AACL,WAAK,kBAAkB;AAAA,IAAA;AAGpB,SAAA,aAAa,KAAK,kBAAkB,EAAE,QAAQ,KAAK,QAAQ,WAAW,oBAAI,KAAK,EAAA,CAAG;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMlF,SAAe;AAChB,QAAA,CAAC,KAAK,OAAO,SAAS;AACxB,WAAK,OAAO,UAAU;AACtB,WAAK,WAAW;AAAA,IAAA;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA,EAMK,UAAgB;AACjB,QAAA,KAAK,OAAO,SAAS;AACvB,WAAK,OAAO,UAAU;AACtB,WAAK,iBAAiB;AAAA,IAAA;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA,EAMK,SAAkB;AACnB,QAAA,KAAK,OAAO,SAAS;AACvB,WAAK,QAAQ;AAAA,IAAA,OACR;AACL,WAAK,OAAO;AAAA,IAAA;AAEd,WAAO,KAAK,OAAO;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMd,UAAgB;AACrB,SAAK,0BAA0B;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAM1B,YAAuC;AACrC,WAAA,EAAE,GAAG,KAAK,OAAO;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMnB,kBAAsC;AAC3C,WAAO,KAAK;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMP,WAAoB;AACzB,WAAO,CAAC,KAAK,cAAc,KAAK,OAAO;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,EAMlC,UAAgB;AACrB,QAAI,KAAK,WAAY;AAErB,SAAK,aAAa;AAGlB,SAAK,wBAAwB;AAE7B,SAAK,iBAAiB;AAGtB,SAAK,YAAY,QAAQ,CAAc,eAAA,WAAW,SAAS;AAC3D,SAAK,cAAc,CAAC;AAGpB,SAAK,aAAa,mBAAmB;AAAA,EAAA;AAEzC;AClbO,MAAM,UAAU;AAKhB,SAAS,oBAA6B;AAC3C,SAAO,OAAO,WAAW,eAAe,CAAC,CAAE,OAAgC;AAC7E;AAKO,SAAS,YAA4B;AAC1C,SAAO,OAAO,WAAW,cAAe,OAAgC,UAAU,OAAO;AAC3F;AAKgB,SAAA,gBACd,QACA,QACA,SACiB;AACjB,SAAO,IAAIA,gBAAgB,QAAQ,QAAQ,OAAO;AACpD;AAKgB,SAAA,eACd,QACA,QACA,SACiB;AACjB,QAAM,YAAY,IAAIA,gBAAgB,QAAQ,QAAQ;AAAA,IACpD,sBAAsB;AAAA,IACtB,sBAAsB;AAAA,IACtB,mBAAmB;AAAA,IACnB,cAAc;AAAA,IACd,GAAG;AAAA,EAAA,CACJ;AAEM,SAAA;AACT;AAKgB,SAAA,uBACd,QACA,QACA,SACiB;AACV,SAAA,IAAIA,gBAAgB,QAAQ,QAAQ;AAAA,IACzC,sBAAsB;AAAA,IACtB,sBAAsB;AAAA,IACtB,mBAAmB;AAAA,IACnB,mBAAmB;AAAA,IACnB,cAAc;AAAA,IACd,GAAG;AAAA,EAAA,CACJ;AACH;"}