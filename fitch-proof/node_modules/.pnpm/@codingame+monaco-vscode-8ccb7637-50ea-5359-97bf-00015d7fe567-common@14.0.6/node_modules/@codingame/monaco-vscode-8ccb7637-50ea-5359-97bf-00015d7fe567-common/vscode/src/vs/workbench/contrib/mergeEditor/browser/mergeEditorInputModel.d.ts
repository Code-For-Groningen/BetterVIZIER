import { IDisposable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { IObservable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/observable";
import { URI } from "@codingame/monaco-vscode-api/vscode/vs/base/common/uri";
import { IModelService } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/services/model";
import { ITextModelService } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/services/resolverService";
import { ConfirmResult } from "@codingame/monaco-vscode-d4a98668-f793-5361-a9cf-1e6ae6d62ce3-common/vscode/vs/platform/dialogs/common/dialogs";
import { IInstantiationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation";
import { IRevertOptions } from "@codingame/monaco-vscode-api/vscode/vs/workbench/common/editor";
import { MergeEditorInputData } from "./mergeEditorInput.js";
import { MergeEditorModel } from "./model/mergeEditorModel.js";
import { MergeEditorTelemetry } from "./telemetry.js";
import { ITextFileSaveOptions } from "@codingame/monaco-vscode-a17f5129-e16c-5dac-857e-dcd91bfeffa2-common/vscode/vs/workbench/services/textfile/common/textfiles";
import { ITextFileService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/textfile/common/textfiles.service";
export interface MergeEditorArgs {
    base: URI;
    input1: MergeEditorInputData;
    input2: MergeEditorInputData;
    result: URI;
}
export interface IMergeEditorInputModelFactory {
    createInputModel(args: MergeEditorArgs): Promise<IMergeEditorInputModel>;
}
export interface IMergeEditorInputModel extends IDisposable {
    readonly resultUri: URI;
    readonly model: MergeEditorModel;
    readonly isDirty: IObservable<boolean>;
    save(options?: ITextFileSaveOptions): Promise<void>;
    revert(options?: IRevertOptions): Promise<void>;
    shouldConfirmClose(): boolean;
    confirmClose(inputModels: IMergeEditorInputModel[]): Promise<ConfirmResult>;
    accept(): Promise<void>;
}
export declare class TempFileMergeEditorModeFactory implements IMergeEditorInputModelFactory {
    private readonly _mergeEditorTelemetry;
    private readonly _instantiationService;
    private readonly _textModelService;
    private readonly _modelService;
    constructor(_mergeEditorTelemetry: MergeEditorTelemetry, _instantiationService: IInstantiationService, _textModelService: ITextModelService, _modelService: IModelService);
    createInputModel(args: MergeEditorArgs): Promise<IMergeEditorInputModel>;
}
export declare class WorkspaceMergeEditorModeFactory implements IMergeEditorInputModelFactory {
    private readonly _mergeEditorTelemetry;
    private readonly _instantiationService;
    private readonly _textModelService;
    private readonly textFileService;
    constructor(_mergeEditorTelemetry: MergeEditorTelemetry, _instantiationService: IInstantiationService, _textModelService: ITextModelService, textFileService: ITextFileService);
    private static readonly FILE_SAVED_SOURCE;
    createInputModel(args: MergeEditorArgs): Promise<IMergeEditorInputModel>;
}
