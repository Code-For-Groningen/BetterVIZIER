
import { __decorate, __param } from '../../../../../../../../../external/tslib/tslib.es6.js';
import { createHotClass } from '../../../../../../base/common/hotReloadHelpers.js';
import { Disposable } from '../../../../../../base/common/lifecycle.js';
import '../../../../../../base/common/arrays.js';
import '../../../../../../base/common/event.js';
import '../../../../../../base/common/observableInternal/autorun.js';
import { derived } from '../../../../../../base/common/observableInternal/derived.js';
import '../../../../../../base/common/cancellation.js';
import '../../../../../../base/common/observableInternal/utils.js';
import { IInstantiationService } from '../../../../../../platform/instantiation/common/instantiation.js';
import { SingleLineEdit } from '../../../../../common/core/lineEdit.js';
import { Range } from '../../../../../common/core/range.js';
import { SingleTextEdit, TextEdit } from '../../../../../common/core/textEdit.js';
import { TextModelText } from '../../../../../common/model/textModelText.js';
import { InlineEditsView } from './view.js';

var InlineEditsViewAndDiffProducer_1;
let InlineEditsViewAndDiffProducer = class InlineEditsViewAndDiffProducer extends Disposable {
    static { InlineEditsViewAndDiffProducer_1 = this; }
    static { this.hot = createHotClass(InlineEditsViewAndDiffProducer_1); }
    constructor(_editor, _edit, _model, _focusIsInMenu, _instantiationService) {
        super();
        this._editor = _editor;
        this._edit = _edit;
        this._model = _model;
        this._focusIsInMenu = _focusIsInMenu;
        this._instantiationService = _instantiationService;
        this._inlineEdit = derived(this, (reader) => {
            const model = this._model.read(reader);
            if (!model) {
                return undefined;
            }
            const inlineEdit = this._edit.read(reader);
            if (!inlineEdit) {
                return undefined;
            }
            const textModel = this._editor.getModel();
            if (!textModel) {
                return undefined;
            }
            const editOffset = model.inlineEditState.get()?.inlineCompletion.inlineEdit.read(reader);
            if (!editOffset) {
                return undefined;
            }
            const edits = ( editOffset.edits.map(e => {
                const innerEditRange = Range.fromPositions(textModel.getPositionAt(e.replaceRange.start), textModel.getPositionAt(e.replaceRange.endExclusive));
                return ( new SingleTextEdit(innerEditRange, e.newText));
            }));
            const diffEdits = ( new TextEdit(edits));
            const text = ( new TextModelText(textModel));
            return ( new InlineEditWithChanges(
                text,
                diffEdits,
                inlineEdit.isCollapsed,
                model.primaryPosition.get(),
                inlineEdit.renderExplicitly,
                inlineEdit.commands,
                inlineEdit.inlineCompletion
            ));
        });
        this._register(this._instantiationService.createInstance(InlineEditsView, this._editor, this._inlineEdit, this._model, this._focusIsInMenu));
    }
};
InlineEditsViewAndDiffProducer = InlineEditsViewAndDiffProducer_1 = ( __decorate([
    ( __param(4, IInstantiationService))
], InlineEditsViewAndDiffProducer));
class InlineEditWithChanges {
    constructor(originalText, edit, isCollapsed, cursorPosition, userJumpedToIt, commands, inlineCompletion) {
        this.originalText = originalText;
        this.edit = edit;
        this.isCollapsed = isCollapsed;
        this.cursorPosition = cursorPosition;
        this.userJumpedToIt = userJumpedToIt;
        this.commands = commands;
        this.inlineCompletion = inlineCompletion;
        this.lineEdit = SingleLineEdit.fromSingleTextEdit(this.edit.toSingle(this.originalText), this.originalText);
        this.originalLineRange = this.lineEdit.lineRange;
        this.modifiedLineRange = this.lineEdit.toLineEdit().getNewLineRanges()[0];
    }
    equals(other) {
        return this.originalText.getValue() === other.originalText.getValue() &&
            this.edit.equals(other.edit) &&
            this.isCollapsed === other.isCollapsed &&
            this.cursorPosition.equals(other.cursorPosition) &&
            this.userJumpedToIt === other.userJumpedToIt &&
            this.commands === other.commands &&
            this.inlineCompletion === other.inlineCompletion;
    }
}

export { InlineEditWithChanges, InlineEditsViewAndDiffProducer };
