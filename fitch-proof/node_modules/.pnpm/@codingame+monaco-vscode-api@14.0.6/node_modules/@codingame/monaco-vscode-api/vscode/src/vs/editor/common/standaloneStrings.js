
import { localize } from '../../nls.js';

var AccessibilityHelpNLS;
(function (AccessibilityHelpNLS) {
    AccessibilityHelpNLS.accessibilityHelpTitle = ( localize(787, "Accessibility Help"));
    AccessibilityHelpNLS.openingDocs = ( localize(788, "Opening the Accessibility documentation page."));
    AccessibilityHelpNLS.readonlyDiffEditor = ( localize(789, "You are in a read-only pane of a diff editor."));
    AccessibilityHelpNLS.editableDiffEditor = ( localize(790, "You are in a pane of a diff editor."));
    AccessibilityHelpNLS.readonlyEditor = ( localize(791, "You are in a read-only code editor."));
    AccessibilityHelpNLS.editableEditor = ( localize(792, "You are in a code editor."));
    AccessibilityHelpNLS.changeConfigToOnMac = ( localize(
        793,
        "Configure the application to be optimized for usage with a Screen Reader (Command+E)."
    ));
    AccessibilityHelpNLS.changeConfigToOnWinLinux = ( localize(
        794,
        "Configure the application to be optimized for usage with a Screen Reader (Control+E)."
    ));
    AccessibilityHelpNLS.auto_on = ( localize(
        795,
        "The application is configured to be optimized for usage with a Screen Reader."
    ));
    AccessibilityHelpNLS.auto_off = ( localize(
        796,
        "The application is configured to never be optimized for usage with a Screen Reader."
    ));
    AccessibilityHelpNLS.screenReaderModeEnabled = ( localize(797, "Screen Reader Optimized Mode enabled."));
    AccessibilityHelpNLS.screenReaderModeDisabled = ( localize(798, "Screen Reader Optimized Mode disabled."));
    AccessibilityHelpNLS.tabFocusModeOnMsg = ( localize(
        799,
        "Pressing Tab in the current editor will move focus to the next focusable element. Toggle this behavior{0}.",
        '<keybinding:editor.action.toggleTabFocusMode>'
    ));
    AccessibilityHelpNLS.tabFocusModeOffMsg = ( localize(
        800,
        "Pressing Tab in the current editor will insert the tab character. Toggle this behavior{0}.",
        '<keybinding:editor.action.toggleTabFocusMode>'
    ));
    AccessibilityHelpNLS.stickScroll = ( localize(
        801,
        "Focus Sticky Scroll{0} to focus the currently nested scopes.",
        '<keybinding:editor.action.focusStickyDebugConsole>'
    ));
    AccessibilityHelpNLS.codeFolding = ( localize(
        802,
        "Use code folding to collapse blocks of code and focus on the code you're interested in via the Toggle Folding Command{0}.",
        '<keybinding:editor.toggleFold>'
    ));
    AccessibilityHelpNLS.intellisense = ( localize(
        803,
        "Use Intellisense to improve coding efficiency and reduce errors. Trigger suggestions{0}.",
        '<keybinding:editor.action.triggerSuggest>'
    ));
    AccessibilityHelpNLS.showOrFocusHover = ( localize(
        804,
        "Show or focus the hover{0} to read information about the current symbol.",
        '<keybinding:editor.action.showHover>'
    ));
    AccessibilityHelpNLS.goToSymbol = ( localize(
        805,
        "Go to Symbol{0} to quickly navigate between symbols in the current file.",
        '<keybinding:workbench.action.gotoSymbol>'
    ));
    AccessibilityHelpNLS.showAccessibilityHelpAction = ( localize(806, "Show Accessibility Help"));
    AccessibilityHelpNLS.listSignalSounds = ( localize(
        807,
        "Run the command: List Signal Sounds for an overview of all sounds and their current status."
    ));
    AccessibilityHelpNLS.listAlerts = ( localize(
        808,
        "Run the command: List Signal Announcements for an overview of announcements and their current status."
    ));
    AccessibilityHelpNLS.quickChat = ( localize(
        809,
        "Toggle quick chat{0} to open or close a chat session.",
        '<keybinding:workbench.action.quickchat.toggle>'
    ));
    AccessibilityHelpNLS.startInlineChat = ( localize(
        810,
        "Start inline chat{0} to create an in editor chat session.",
        '<keybinding:inlineChat.start>'
    ));
    AccessibilityHelpNLS.startDebugging = ( localize(
        811,
        "The Debug: Start Debugging command{0} will start a debug session.",
        '<keybinding:workbench.action.debug.start>'
    ));
    AccessibilityHelpNLS.setBreakpoint = ( localize(
        812,
        "The Debug: Inline Breakpoint command{0} will set or unset a breakpoint at the current cursor position in the active editor.",
        '<keybinding:editor.debug.action.toggleInlineBreakpoint>'
    ));
    AccessibilityHelpNLS.addToWatch = ( localize(
        813,
        "The Debug: Add to Watch command{0} will add the selected text to the watch view.",
        '<keybinding:editor.debug.action.selectionToWatch>'
    ));
    AccessibilityHelpNLS.debugExecuteSelection = ( localize(
        814,
        "The Debug: Execute Selection command{0} will execute the selected text in the debug console.",
        '<keybinding:editor.debug.action.selectionToRepl>'
    ));
    AccessibilityHelpNLS.chatEditorModification = ( localize(
        815,
        "The editor contains pending modifications that have been made by chat."
    ));
    AccessibilityHelpNLS.chatEditorRequestInProgress = ( localize(
        816,
        "The editor is currently waiting for modifications to be made by chat."
    ));
    AccessibilityHelpNLS.chatEditActions = ( localize(
        817,
        'Navigate between edits in the editor with navigate previous{0} and next{1} and accept{3} and reject the current change{4}.',
        '<keybinding:chatEditor.action.navigatePrevious>',
        '<keybinding:chatEditor.action.navigateNext>',
        '<keybinding:chatEditor.action.acceptHunk>',
        '<keybinding:chatEditor.action.reject>'
    ));
})(AccessibilityHelpNLS || (AccessibilityHelpNLS = {}));
var InspectTokensNLS;
(function (InspectTokensNLS) {
    InspectTokensNLS.inspectTokensAction = ( localize(818, "Developer: Inspect Tokens"));
})(InspectTokensNLS || (InspectTokensNLS = {}));
var GoToLineNLS;
(function (GoToLineNLS) {
    GoToLineNLS.gotoLineActionLabel = ( localize(819, "Go to Line/Column..."));
})(GoToLineNLS || (GoToLineNLS = {}));
var QuickHelpNLS;
(function (QuickHelpNLS) {
    QuickHelpNLS.helpQuickAccessActionLabel = ( localize(820, "Show all Quick Access Providers"));
})(QuickHelpNLS || (QuickHelpNLS = {}));
var QuickCommandNLS;
(function (QuickCommandNLS) {
    QuickCommandNLS.quickCommandActionLabel = ( localize(821, "Command Palette"));
    QuickCommandNLS.quickCommandHelp = ( localize(822, "Show And Run Commands"));
})(QuickCommandNLS || (QuickCommandNLS = {}));
var QuickOutlineNLS;
(function (QuickOutlineNLS) {
    QuickOutlineNLS.quickOutlineActionLabel = ( localize(823, "Go to Symbol..."));
    QuickOutlineNLS.quickOutlineByCategoryActionLabel = ( localize(824, "Go to Symbol by Category..."));
})(QuickOutlineNLS || (QuickOutlineNLS = {}));
var StandaloneCodeEditorNLS;
(function (StandaloneCodeEditorNLS) {
    StandaloneCodeEditorNLS.editorViewAccessibleLabel = ( localize(825, "Editor content"));
})(StandaloneCodeEditorNLS || (StandaloneCodeEditorNLS = {}));
var ToggleHighContrastNLS;
(function (ToggleHighContrastNLS) {
    ToggleHighContrastNLS.toggleHighContrast = ( localize(826, "Toggle High Contrast Theme"));
})(ToggleHighContrastNLS || (ToggleHighContrastNLS = {}));
var StandaloneServicesNLS;
(function (StandaloneServicesNLS) {
    StandaloneServicesNLS.bulkEditServiceSummary = ( localize(827, "Made {0} edits in {1} files"));
})(StandaloneServicesNLS || (StandaloneServicesNLS = {}));

export { AccessibilityHelpNLS, GoToLineNLS, InspectTokensNLS, QuickCommandNLS, QuickHelpNLS, QuickOutlineNLS, StandaloneCodeEditorNLS, StandaloneServicesNLS, ToggleHighContrastNLS };
