
import { URI } from '../../../../base/common/uri.js';
import { localize } from '../../../../nls.js';
import { RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';

var WorkingSetEntryRemovalReason;
(function (WorkingSetEntryRemovalReason) {
    WorkingSetEntryRemovalReason[WorkingSetEntryRemovalReason["User"] = 0] = "User";
    WorkingSetEntryRemovalReason[WorkingSetEntryRemovalReason["Programmatic"] = 1] = "Programmatic";
})(WorkingSetEntryRemovalReason || (WorkingSetEntryRemovalReason = {}));
var WorkingSetEntryState;
(function (WorkingSetEntryState) {
    WorkingSetEntryState[WorkingSetEntryState["Modified"] = 0] = "Modified";
    WorkingSetEntryState[WorkingSetEntryState["Accepted"] = 1] = "Accepted";
    WorkingSetEntryState[WorkingSetEntryState["Rejected"] = 2] = "Rejected";
    WorkingSetEntryState[WorkingSetEntryState["Transient"] = 3] = "Transient";
    WorkingSetEntryState[WorkingSetEntryState["Attached"] = 4] = "Attached";
    WorkingSetEntryState[WorkingSetEntryState["Sent"] = 5] = "Sent";
    WorkingSetEntryState[WorkingSetEntryState["Suggested"] = 6] = "Suggested";
})(WorkingSetEntryState || (WorkingSetEntryState = {}));
var ChatEditingSessionChangeType;
(function (ChatEditingSessionChangeType) {
    ChatEditingSessionChangeType[ChatEditingSessionChangeType["WorkingSet"] = 0] = "WorkingSet";
    ChatEditingSessionChangeType[ChatEditingSessionChangeType["Other"] = 1] = "Other";
})(ChatEditingSessionChangeType || (ChatEditingSessionChangeType = {}));
var ChatEditingSessionState;
(function (ChatEditingSessionState) {
    ChatEditingSessionState[ChatEditingSessionState["Initial"] = 0] = "Initial";
    ChatEditingSessionState[ChatEditingSessionState["StreamingEdits"] = 1] = "StreamingEdits";
    ChatEditingSessionState[ChatEditingSessionState["Idle"] = 2] = "Idle";
    ChatEditingSessionState[ChatEditingSessionState["Disposed"] = 3] = "Disposed";
})(ChatEditingSessionState || (ChatEditingSessionState = {}));
const CHAT_EDITING_MULTI_DIFF_SOURCE_RESOLVER_SCHEME = 'chat-editing-multi-diff-source';
const chatEditingWidgetFileStateContextKey = ( new RawContextKey('chatEditingWidgetFileState', undefined, ( localize(4752, "The current state of the file in the chat editing widget"))));
const chatEditingWidgetFileReadonlyContextKey = ( new RawContextKey('chatEditingWidgetFileReadonly', undefined, ( localize(
    4753,
    "Whether the file has been marked as read-only in the chat editing widget"
))));
const chatEditingAgentSupportsReadonlyReferencesContextKey = ( new RawContextKey('chatEditingAgentSupportsReadonlyReferences', undefined, ( localize(
    4754,
    "Whether the chat editing agent supports readonly references (temporary)"
))));
const decidedChatEditingResourceContextKey = ( new RawContextKey('decidedChatEditingResource', []));
const chatEditingResourceContextKey = ( new RawContextKey('chatEditingResource', undefined));
const inChatEditingSessionContextKey = ( new RawContextKey('inChatEditingSession', undefined));
const applyingChatEditsContextKey = ( new RawContextKey('isApplyingChatEdits', undefined));
const hasUndecidedChatEditingResourceContextKey = ( new RawContextKey('hasUndecidedChatEditingResource', false));
const hasAppliedChatEditsContextKey = ( new RawContextKey('hasAppliedChatEdits', false));
const applyingChatEditsFailedContextKey = ( new RawContextKey('applyingChatEditsFailed', false));
const chatEditingMaxFileAssignmentName = 'chatEditingSessionFileLimit';
const defaultChatEditingMaxFileLimit = 10;
var ChatEditKind;
(function (ChatEditKind) {
    ChatEditKind[ChatEditKind["Created"] = 0] = "Created";
    ChatEditKind[ChatEditKind["Modified"] = 1] = "Modified";
})(ChatEditKind || (ChatEditKind = {}));
function isChatEditingActionContext(thing) {
    return typeof thing === 'object' && !!thing && 'sessionId' in thing;
}
function getMultiDiffSourceUri() {
    return ( URI.from({
        scheme: CHAT_EDITING_MULTI_DIFF_SOURCE_RESOLVER_SCHEME,
        path: '',
    }));
}

export { CHAT_EDITING_MULTI_DIFF_SOURCE_RESOLVER_SCHEME, ChatEditKind, ChatEditingSessionChangeType, ChatEditingSessionState, WorkingSetEntryRemovalReason, WorkingSetEntryState, applyingChatEditsContextKey, applyingChatEditsFailedContextKey, chatEditingAgentSupportsReadonlyReferencesContextKey, chatEditingMaxFileAssignmentName, chatEditingResourceContextKey, chatEditingWidgetFileReadonlyContextKey, chatEditingWidgetFileStateContextKey, decidedChatEditingResourceContextKey, defaultChatEditingMaxFileLimit, getMultiDiffSourceUri, hasAppliedChatEditsContextKey, hasUndecidedChatEditingResourceContextKey, inChatEditingSessionContextKey, isChatEditingActionContext };
