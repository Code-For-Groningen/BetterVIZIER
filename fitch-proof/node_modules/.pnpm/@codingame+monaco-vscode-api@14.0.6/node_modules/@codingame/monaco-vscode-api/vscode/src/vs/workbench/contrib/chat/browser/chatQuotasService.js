
import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';
import { Codicon } from '../../../../base/common/codicons.js';
import { safeIntl } from '../../../../base/common/date.js';
import { language } from '../../../../base/common/platform.js';
import { Emitter, Event } from '../../../../base/common/event.js';
import { MarkdownString } from '../../../../base/common/htmlContent.js';
import { Disposable, DisposableStore } from '../../../../base/common/lifecycle.js';
import { localize } from '../../../../nls.js';
import { Action2, registerAction2 } from '../../../../platform/actions/common/actions.js';
import { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.service.js';
import { IDialogService } from '../../../../platform/dialogs/common/dialogs.service.js';
import { StatusbarAlignment } from '../../../services/statusbar/browser/statusbar.js';
import { IStatusbarService } from '../../../services/statusbar/browser/statusbar.service.js';
import { ChatContextKeys } from '../common/chatContextKeys.js';
import { ICommandService } from '../../../../platform/commands/common/commands.service.js';
import { IChatQuotasService } from './chatQuotasService.service.js';

var ChatQuotasStatusBarEntry_1;
const OPEN_CHAT_QUOTA_EXCEEDED_DIALOG = 'workbench.action.chat.openQuotaExceededDialog';
let ChatQuotasService = class ChatQuotasService extends Disposable {
    get quotas() { return this._quotas; }
    constructor(contextKeyService) {
        super();
        this.contextKeyService = contextKeyService;
        this._onDidChangeQuotas = this._register(( new Emitter()));
        this.onDidChangeQuotas = this._onDidChangeQuotas.event;
        this._quotas = { chatQuotaExceeded: false, completionsQuotaExceeded: false, quotaResetDate: undefined };
        this.chatQuotaExceededContextKey = ChatContextKeys.chatQuotaExceeded.bindTo(this.contextKeyService);
        this.completionsQuotaExceededContextKey = ChatContextKeys.completionsQuotaExceeded.bindTo(this.contextKeyService);
        this.ExtensionQuotaContextKeys = {
            chatQuotaExceeded: 'github.copilot.chat.quotaExceeded',
            completionsQuotaExceeded: 'github.copilot.completions.quotaExceeded',
        };
        this.registerListeners();
        this.registerActions();
    }
    registerListeners() {
        const chatQuotaExceededSet = ( new Set([this.ExtensionQuotaContextKeys.chatQuotaExceeded]));
        const completionsQuotaExceededSet = ( new Set([this.ExtensionQuotaContextKeys.completionsQuotaExceeded]));
        this._register(this.contextKeyService.onDidChangeContext(e => {
            let changed = false;
            if (e.affectsSome(chatQuotaExceededSet)) {
                const newChatQuotaExceeded = this.contextKeyService.getContextKeyValue(this.ExtensionQuotaContextKeys.chatQuotaExceeded);
                if (typeof newChatQuotaExceeded === 'boolean' && newChatQuotaExceeded !== this._quotas.chatQuotaExceeded) {
                    this._quotas.chatQuotaExceeded = newChatQuotaExceeded;
                    changed = true;
                }
            }
            if (e.affectsSome(completionsQuotaExceededSet)) {
                const newCompletionsQuotaExceeded = this.contextKeyService.getContextKeyValue(this.ExtensionQuotaContextKeys.completionsQuotaExceeded);
                if (typeof newCompletionsQuotaExceeded === 'boolean' && newCompletionsQuotaExceeded !== this._quotas.completionsQuotaExceeded) {
                    this._quotas.completionsQuotaExceeded = newCompletionsQuotaExceeded;
                    changed = true;
                }
            }
            if (changed) {
                this.updateContextKeys();
                this._onDidChangeQuotas.fire();
            }
        }));
    }
    registerActions() {
        const that = this;
        class ShowLimitReachedDialogAction extends Action2 {
            constructor() {
                super({
                    id: OPEN_CHAT_QUOTA_EXCEEDED_DIALOG,
                    title: ( localize(4621, "Upgrade to Copilot Pro")),
                });
            }
            async run(accessor) {
                const commandService = accessor.get(ICommandService);
                const dialogService = accessor.get(IDialogService);
                const dateFormatter = safeIntl.DateTimeFormat(language, { year: 'numeric', month: 'long', day: 'numeric' });
                let message;
                const { chatQuotaExceeded, completionsQuotaExceeded } = that.quotas;
                if (chatQuotaExceeded && !completionsQuotaExceeded) {
                    message = ( localize(
                        4622,
                        "You've run out of free chat messages. You still have free code completions available in the Copilot Free plan. These limits will reset on {0}.",
                        dateFormatter.format(that.quotas.quotaResetDate)
                    ));
                }
                else if (completionsQuotaExceeded && !chatQuotaExceeded) {
                    message = ( localize(
                        4623,
                        "You've run out of free code completions. You still have free chat messages available in the Copilot Free plan. These limits will reset on {0}.",
                        dateFormatter.format(that.quotas.quotaResetDate)
                    ));
                }
                else {
                    message = ( localize(
                        4624,
                        "You've reached the limit of the Copilot Free plan. These limits will reset on {0}.",
                        dateFormatter.format(that.quotas.quotaResetDate)
                    ));
                }
                const upgradeToPro = ( localize(
                    4625,
                    "Upgrade to Copilot Pro (your first 30 days are free) for:\n- Unlimited code completions\n- Unlimited chat messages\n- Access to additional models"
                ));
                await dialogService.prompt({
                    type: 'none',
                    message: ( localize(4626, "Copilot Limit Reached")),
                    cancelButton: {
                        label: ( localize(4627, "Dismiss")),
                        run: () => { }
                    },
                    buttons: [
                        {
                            label: ( localize(4628, "Upgrade to Copilot Pro")),
                            run: () => commandService.executeCommand('workbench.action.chat.upgradePlan')
                        },
                    ],
                    custom: {
                        icon: Codicon.copilotWarningLarge,
                        markdownDetails: [
                            { markdown: ( new MarkdownString(message, true)) },
                            { markdown: ( new MarkdownString(upgradeToPro, true)) }
                        ]
                    }
                });
            }
        }
        registerAction2(ShowLimitReachedDialogAction);
    }
    acceptQuotas(quotas) {
        this._quotas = quotas;
        this.updateContextKeys();
        this._onDidChangeQuotas.fire();
    }
    clearQuotas() {
        if (this.quotas.chatQuotaExceeded || this.quotas.completionsQuotaExceeded) {
            this.acceptQuotas({ chatQuotaExceeded: false, completionsQuotaExceeded: false, quotaResetDate: undefined });
        }
    }
    updateContextKeys() {
        this.chatQuotaExceededContextKey.set(this._quotas.chatQuotaExceeded);
        this.completionsQuotaExceededContextKey.set(this._quotas.completionsQuotaExceeded);
    }
};
ChatQuotasService = ( __decorate([
    ( __param(0, IContextKeyService))
], ChatQuotasService));
let ChatQuotasStatusBarEntry = class ChatQuotasStatusBarEntry extends Disposable {
    static { ChatQuotasStatusBarEntry_1 = this; }
    static { this.ID = 'chat.quotasStatusBarEntry'; }
    constructor(statusbarService, chatQuotasService) {
        super();
        this.statusbarService = statusbarService;
        this.chatQuotasService = chatQuotasService;
        this.entry = this._register(( new DisposableStore()));
        this._register(Event.runAndSubscribe(this.chatQuotasService.onDidChangeQuotas, () => this.updateStatusbarEntry()));
    }
    updateStatusbarEntry() {
        this.entry.clear();
        const { chatQuotaExceeded, completionsQuotaExceeded } = this.chatQuotasService.quotas;
        if (chatQuotaExceeded || completionsQuotaExceeded) {
            let text;
            if (chatQuotaExceeded && !completionsQuotaExceeded) {
                text = ( localize(4629, "Chat limit reached"));
            }
            else if (completionsQuotaExceeded && !chatQuotaExceeded) {
                text = ( localize(4630, "Completions limit reached"));
            }
            else {
                text = ( localize(4631, "Copilot limit reached"));
            }
            this.entry.add(this.statusbarService.addEntry({
                name: ( localize(4632, "Copilot Limit Indicator")),
                text: `$(copilot-warning) ${text}`,
                ariaLabel: text,
                command: OPEN_CHAT_QUOTA_EXCEEDED_DIALOG,
                showInAllWindows: true,
                kind: 'prominent',
                tooltip: quotaToButtonMessage({ chatQuotaExceeded, completionsQuotaExceeded })
            }, ChatQuotasStatusBarEntry_1.ID, StatusbarAlignment.RIGHT, 1));
        }
    }
};
ChatQuotasStatusBarEntry = ChatQuotasStatusBarEntry_1 = ( __decorate([
    ( __param(0, IStatusbarService)),
    ( __param(1, IChatQuotasService))
], ChatQuotasStatusBarEntry));
function quotaToButtonMessage({ chatQuotaExceeded, completionsQuotaExceeded }) {
    if (chatQuotaExceeded && !completionsQuotaExceeded) {
        return localize(4633, "Monthly chat messages limit reached. Click for details.");
    }
    else if (completionsQuotaExceeded && !chatQuotaExceeded) {
        return localize(4634, "Monthly code completions limit reached. Click for details.");
    }
    else {
        return localize(4635, "Copilot Free plan limit reached. Click for details.");
    }
}

export { ChatQuotasService, ChatQuotasStatusBarEntry, OPEN_CHAT_QUOTA_EXCEEDED_DIALOG, quotaToButtonMessage };
