

class ParseError extends Error {
    constructor(message, options) {
        super(message, options);
    }
    sameTypeAs(other) {
        if (other === null || other === undefined) {
            return false;
        }
        return other instanceof this.constructor;
    }
    equal(other) {
        return this.sameTypeAs(other);
    }
}
class FailedToResolveContentsStream extends ParseError {
    constructor(uri, originalError, message = `Failed to resolve prompt contents stream for '${( uri.toString())}': ${originalError}.`) {
        super(message);
        this.uri = uri;
        this.originalError = originalError;
        this.errorType = 'FailedToResolveContentsStream';
    }
}
class ResolveError extends ParseError {
    constructor(uri, message, options) {
        super(message, options);
        this.uri = uri;
    }
}
class FileOpenFailed extends FailedToResolveContentsStream {
    constructor(uri, originalError) {
        super(uri, originalError, `Failed to open file '${( uri.toString())}': ${originalError}.`);
        this.errorType = 'FileOpenError';
    }
}
class RecursiveReference extends ResolveError {
    constructor(uri, recursivePath) {
        const references = recursivePath.join(' -> ');
        super(uri, `Recursive references found: ${references}.`);
        this.recursivePath = recursivePath;
        this.errorType = 'RecursiveReferenceError';
    }
    get recursivePathString() {
        return this.recursivePath.join(' -> ');
    }
    equal(other) {
        if (!this.sameTypeAs(other)) {
            return false;
        }
        if (( this.uri.toString()) !== ( other.uri.toString())) {
            return false;
        }
        return this.recursivePathString === other.recursivePathString;
    }
    toString() {
        return `"${this.message}"(${this.uri})`;
    }
}
class NonPromptSnippetFile extends ResolveError {
    constructor(uri, message = '') {
        const suffix = message ? `: ${message}` : '';
        super(uri, `Resource at ${uri.path} is not a prompt snippet file${suffix}`);
        this.errorType = 'NonPromptSnippetFileError';
    }
}

export { FailedToResolveContentsStream, FileOpenFailed, NonPromptSnippetFile, ParseError, RecursiveReference, ResolveError };
