import { IFileService } from "@codingame/monaco-vscode-api/vscode/vs/platform/files/common/files.service";
import { Themable } from "@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/themeService";
import { IThemeService } from "@codingame/monaco-vscode-api/vscode/vs/platform/theme/common/themeService.service";
import { IEditorService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/editor/common/editorService.service";
import { IExtensionService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/services/extensions/common/extensions.service";
import { IChatRequestVariableEntry } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/chatModel";
import { ChatAttachmentModel } from "./chatAttachmentModel.js";
import { IChatInputStyles } from "./chatInputPart.js";
declare enum ChatDragAndDropType {
    FILE_INTERNAL = 0,
    FILE_EXTERNAL = 1,
    FOLDER = 2,
    IMAGE = 3,
    SYMBOL = 4
}
export declare class ChatDragAndDrop extends Themable {
    protected readonly attachmentModel: ChatAttachmentModel;
    private readonly styles;
    private readonly extensionService;
    protected readonly fileService: IFileService;
    protected readonly editorService: IEditorService;
    private readonly overlays;
    private overlayText?;
    private overlayTextBackground;
    constructor(attachmentModel: ChatAttachmentModel, styles: IChatInputStyles, themeService: IThemeService, extensionService: IExtensionService, fileService: IFileService, editorService: IEditorService);
    addOverlay(target: HTMLElement, overlayContainer: HTMLElement): void;
    removeOverlay(target: HTMLElement): void;
    private currentActiveTarget;
    private createOverlay;
    private onDragEnter;
    private onDragLeave;
    private onDrop;
    private drop;
    protected handleDrop(contexts: IChatRequestVariableEntry[]): void;
    private updateDropFeedback;
    private guessDropType;
    private isDragEventSupported;
    protected getDropTypeName(type: ChatDragAndDropType): string;
    private isImageDnd;
    private getAttachContext;
    private resolveAttachContext;
    private getEditorAttachContext;
    private resolveUntitledAttachContext;
    private resolveSymbolsAttachContext;
    private setOverlay;
    protected getOverlayText(type: ChatDragAndDropType): string;
    private updateOverlayStyles;
    updateStyles(): void;
}
export declare class EditsDragAndDrop extends ChatDragAndDrop {
    constructor(attachmentModel: ChatAttachmentModel, styles: IChatInputStyles, themeService: IThemeService, extensionService: IExtensionService, fileService: IFileService, editorService: IEditorService);
    protected handleDrop(context: IChatRequestVariableEntry[]): void;
    protected handleDropAsync(context: IChatRequestVariableEntry[]): Promise<void>;
    protected getOverlayText(type: ChatDragAndDropType): string;
}
export {};
