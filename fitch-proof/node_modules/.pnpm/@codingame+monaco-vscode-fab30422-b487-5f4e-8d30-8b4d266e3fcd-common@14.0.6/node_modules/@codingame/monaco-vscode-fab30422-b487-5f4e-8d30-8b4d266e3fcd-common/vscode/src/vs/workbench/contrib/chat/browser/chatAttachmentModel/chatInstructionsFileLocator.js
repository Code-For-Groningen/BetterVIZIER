
import { __decorate, __param } from '@codingame/monaco-vscode-api/external/tslib/tslib.es6';
import { PromptFilesConfig } from '../../common/promptSyntax/config.js';
import { dirname, extUri } from '@codingame/monaco-vscode-api/vscode/vs/base/common/resources';
import { IFileService } from '@codingame/monaco-vscode-api/vscode/vs/platform/files/common/files.service';
import { IConfigurationService } from '@codingame/monaco-vscode-api/vscode/vs/platform/configuration/common/configuration.service';
import { WorkbenchState } from '@codingame/monaco-vscode-api/vscode/vs/platform/workspace/common/workspace';
import { IWorkspaceContextService } from '@codingame/monaco-vscode-api/vscode/vs/platform/workspace/common/workspace.service';
import { PROMPT_SNIPPET_FILE_EXTENSION } from '../../common/promptSyntax/contentProviders/promptContentsProviderBase.js';

let ChatInstructionsFileLocator = class ChatInstructionsFileLocator {
    constructor(fileService, workspaceService, configService) {
        this.fileService = fileService;
        this.workspaceService = workspaceService;
        this.configService = configService;
    }
    async listFiles(exclude) {
        const excludeSet = ( new Set());
        for (const excludeUri of exclude) {
            excludeSet.add(excludeUri.path);
        }
        const locations = this.getSourceLocations()
            .filter((location) => {
            return !( excludeSet.has(location.path));
        });
        return await this.findInstructionFiles(locations, excludeSet);
    }
    getSourceLocations() {
        const state = this.workspaceService.getWorkbenchState();
        if (state === WorkbenchState.EMPTY) {
            return [];
        }
        const sourceLocations = PromptFilesConfig.sourceLocations(this.configService);
        const result = [];
        const { folders } = this.workspaceService.getWorkspace();
        const workspaceRootUri = dirname(folders[0].uri);
        for (const folder of folders) {
            for (const sourceFolderName of sourceLocations) {
                const sourceFolderUri = extUri.resolvePath(folder.uri, sourceFolderName);
                result.push(sourceFolderUri);
                if (folders.length <= 1) {
                    continue;
                }
                const workspaceFolderUri = extUri.resolvePath(workspaceRootUri, sourceFolderName);
                if (workspaceFolderUri.fsPath.startsWith(folder.uri.fsPath)) {
                    result.push(workspaceFolderUri);
                }
            }
        }
        return result;
    }
    async findInstructionFiles(locations, exclude) {
        const results = await this.fileService.resolveAll(( locations.map((location) => {
            return { resource: location };
        })));
        const files = [];
        for (const result of results) {
            const { stat, success } = result;
            if (!success) {
                continue;
            }
            if (!stat || !stat.children) {
                continue;
            }
            for (const child of stat.children) {
                const { name, resource, isDirectory } = child;
                if (isDirectory) {
                    continue;
                }
                if (!name.endsWith(PROMPT_SNIPPET_FILE_EXTENSION)) {
                    continue;
                }
                if (( exclude.has(resource.path))) {
                    continue;
                }
                files.push(resource);
            }
        }
        return files;
    }
};
ChatInstructionsFileLocator = ( __decorate([
    ( __param(0, IFileService)),
    ( __param(1, IWorkspaceContextService)),
    ( __param(2, IConfigurationService))
], ChatInstructionsFileLocator));

export { ChatInstructionsFileLocator };
