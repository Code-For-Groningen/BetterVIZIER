

var PromptFilesConfig;
(function (PromptFilesConfig) {
    PromptFilesConfig.CONFIG_KEY = 'chat.promptFiles';
    PromptFilesConfig.DOCUMENTATION_URL = 'https://aka.ms/vscode-ghcp-prompt-snippets';
    const DEFAULT_LOCATION = ( Object.freeze(['.github/prompts']));
    PromptFilesConfig.getValue = (configService) => {
        const configValue = configService.getValue(PromptFilesConfig.CONFIG_KEY);
        if (configValue === undefined || configValue === null) {
            return undefined;
        }
        if (typeof configValue === 'string') {
            const cleanValue = configValue.trim().toLowerCase();
            if (!cleanValue) {
                return undefined;
            }
            if (asBoolean(cleanValue) !== undefined) {
                return asBoolean(cleanValue);
            }
            return cleanValue;
        }
        if (typeof configValue === 'boolean') {
            return configValue;
        }
        if (Array.isArray(configValue)) {
            return configValue.filter((item) => {
                return typeof item === 'string';
            });
        }
        if (typeof configValue === 'object') {
            const paths = [];
            for (const [path, value] of Object.entries(configValue)) {
                const cleanPath = path.trim();
                if (asBoolean(value) && cleanPath) {
                    paths.push(cleanPath);
                }
            }
            return ( Object.freeze(paths));
        }
        return undefined;
    };
    PromptFilesConfig.enabled = (configService) => {
        const value = PromptFilesConfig.getValue(configService);
        return value !== undefined && value !== false;
    };
    PromptFilesConfig.sourceLocations = (configService) => {
        const value = PromptFilesConfig.getValue(configService);
        if (value === undefined) {
            return DEFAULT_LOCATION;
        }
        if (typeof value === 'string') {
            return ( Object.freeze([value]));
        }
        if (Array.isArray(value) && value.length !== 0) {
            return value;
        }
        return DEFAULT_LOCATION;
    };
})(PromptFilesConfig || (PromptFilesConfig = {}));
function asBoolean(value) {
    if (typeof value === 'boolean') {
        return value;
    }
    if (typeof value === 'string') {
        const cleanValue = value.trim().toLowerCase();
        if (cleanValue === 'true') {
            return true;
        }
        if (cleanValue === 'false') {
            return false;
        }
        return undefined;
    }
    return undefined;
}

export { PromptFilesConfig };
