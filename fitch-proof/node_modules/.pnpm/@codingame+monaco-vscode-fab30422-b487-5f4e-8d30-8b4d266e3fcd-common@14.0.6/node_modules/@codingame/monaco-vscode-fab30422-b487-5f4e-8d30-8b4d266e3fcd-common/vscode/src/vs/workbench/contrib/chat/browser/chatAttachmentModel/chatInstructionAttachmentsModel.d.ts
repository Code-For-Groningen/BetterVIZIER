import { URI } from "@codingame/monaco-vscode-api/vscode/vs/base/common/uri";
import { Emitter } from "@codingame/monaco-vscode-api/vscode/vs/base/common/event";
import { IChatRequestVariableEntry } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/chatModel";
import { IPromptFileReference } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/promptSyntax/parsers/types";
import { ChatInstructionsAttachmentModel } from "./chatInstructionsAttachment.js";
import { Disposable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { IInstantiationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation";
import { IConfigurationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/configuration/common/configuration.service";
export declare const toChatVariable: (reference: Pick<IPromptFileReference, "uri" | "isPromptSnippet">, isRoot: boolean) => IChatRequestVariableEntry;
export declare class ChatInstructionAttachmentsModel extends Disposable {
    private readonly initService;
    private readonly configService;
    private readonly instructionsFileReader;
    private attachments;
    get references(): readonly URI[];
    get chatAttachments(): readonly IChatRequestVariableEntry[];
    allSettled(): Promise<void>;
    protected _onUpdate: Emitter<void>;
    onUpdate(callback: () => unknown): this;
    protected _onAdd: Emitter<ChatInstructionsAttachmentModel>;
    onAdd(callback: (attachment: ChatInstructionsAttachmentModel) => unknown): this;
    constructor(initService: IInstantiationService, configService: IConfigurationService);
    add(uri: URI): this;
    remove(uri: URI): this;
    listNonAttachedFiles(): Promise<readonly URI[]>;
    get featureEnabled(): boolean;
}
