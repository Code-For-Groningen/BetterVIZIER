

async function resizeImage(data) {
    const blob = ( new Blob([data]));
    const img = ( new Image());
    const url = URL.createObjectURL(blob);
    img.src = url;
    return ( new Promise((resolve, reject) => {
        img.onload = () => {
            URL.revokeObjectURL(url);
            let { width, height } = img;
            if (width < 768 || height < 768) {
                resolve(data);
                return;
            }
            if (width > 2048 || height > 2048) {
                const scaleFactor = 2048 / Math.max(width, height);
                width = Math.round(width * scaleFactor);
                height = Math.round(height * scaleFactor);
            }
            const scaleFactor = 768 / Math.min(width, height);
            width = Math.round(width * scaleFactor);
            height = Math.round(height * scaleFactor);
            const canvas = document.createElement('canvas');
            canvas.width = width;
            canvas.height = height;
            const ctx = canvas.getContext('2d');
            if (ctx) {
                ctx.drawImage(img, 0, 0, width, height);
                canvas.toBlob((blob) => {
                    if (blob) {
                        const reader = ( new FileReader());
                        reader.onload = () => {
                            resolve(( new Uint8Array(reader.result)));
                        };
                        reader.onerror = (error) => reject(error);
                        reader.readAsArrayBuffer(blob);
                    }
                    else {
                        reject(( new Error('Failed to create blob from canvas')));
                    }
                }, 'image/png');
            }
            else {
                reject(( new Error('Failed to get canvas context')));
            }
        };
        img.onerror = (error) => {
            URL.revokeObjectURL(url);
            reject(error);
        };
    }));
}

export { resizeImage };
