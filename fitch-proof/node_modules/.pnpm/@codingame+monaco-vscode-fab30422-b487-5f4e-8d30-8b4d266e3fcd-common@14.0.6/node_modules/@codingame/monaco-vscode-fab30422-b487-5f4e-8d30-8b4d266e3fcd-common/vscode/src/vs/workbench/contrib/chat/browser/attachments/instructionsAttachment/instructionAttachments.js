
import { __decorate, __param } from '@codingame/monaco-vscode-api/external/tslib/tslib.es6';
import { $, setVisibility } from '@codingame/monaco-vscode-api/vscode/vs/base/browser/dom';
import { Emitter } from '@codingame/monaco-vscode-api/vscode/vs/base/common/event';
import { Disposable } from '@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle';
import { InstructionsAttachmentWidget } from './instructionsAttachment.js';
import { ILogService } from '@codingame/monaco-vscode-api/vscode/vs/platform/log/common/log.service';
import { IInstantiationService } from '@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation';

let InstructionAttachmentsWidget = class InstructionAttachmentsWidget extends Disposable {
    onAttachmentsCountChange(callback) {
        this._register(this._onAttachmentsCountChange.event(callback));
        return this;
    }
    get references() {
        return this.model.references;
    }
    get chatAttachments() {
        return this.model.chatAttachments;
    }
    get empty() {
        return this.children.length === 0;
    }
    constructor(model, resourceLabels, initService, logService) {
        super();
        this.model = model;
        this.resourceLabels = resourceLabels;
        this.initService = initService;
        this.logService = logService;
        this.children = [];
        this._onAttachmentsCountChange = this._register(( new Emitter()));
        this.render = this.render.bind(this);
        this.domNode = $('.chat-prompt-instructions-attachments');
        this._register(this.model.onUpdate(this.render));
        this.model.onAdd((attachment) => {
            const widget = this.initService.createInstance(InstructionsAttachmentWidget, attachment, this.resourceLabels);
            widget.onDispose(this.handleAttachmentDispose.bind(this, widget));
            this.children.push(widget);
            this.domNode.appendChild(widget.domNode);
            this.render();
            this._onAttachmentsCountChange.fire();
        });
    }
    handleAttachmentDispose(widget) {
        const logPrefix = `[onChildDispose] Widget for instructions attachment '${widget.uri.path}'`;
        let widgetExists = false;
        this.children = this.children.filter((child) => {
            if (child === widget) {
                if (widgetExists) {
                    this.logService.warn(`${logPrefix} is present in the children references list multiple times.`);
                }
                widgetExists = true;
                return false;
            }
            return true;
        });
        if (!widgetExists) {
            this.logService.warn(`${logPrefix} was disposed, but was not found in the child references.`);
        }
        this.domNode.removeChild(widget.domNode);
        this.render();
        this._onAttachmentsCountChange.fire();
        return this;
    }
    render() {
        setVisibility(!this.empty, this.domNode);
        return this;
    }
    dispose() {
        for (const child of this.children) {
            child.dispose();
        }
        super.dispose();
    }
};
InstructionAttachmentsWidget = ( __decorate([
    ( __param(2, IInstantiationService)),
    ( __param(3, ILogService))
], InstructionAttachmentsWidget));

export { InstructionAttachmentsWidget };
