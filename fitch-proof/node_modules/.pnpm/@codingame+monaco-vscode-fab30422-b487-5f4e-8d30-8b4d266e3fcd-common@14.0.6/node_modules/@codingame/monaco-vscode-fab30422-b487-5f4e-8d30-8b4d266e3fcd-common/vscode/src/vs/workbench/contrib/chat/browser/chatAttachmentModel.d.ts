import { Emitter } from "@codingame/monaco-vscode-api/vscode/vs/base/common/event";
import { Disposable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { URI } from "@codingame/monaco-vscode-api/vscode/vs/base/common/uri";
import { IRange } from "@codingame/monaco-vscode-api/vscode/vs/editor/common/core/range";
import { IChatEditingService } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/chatEditingService.service";
import { IChatRequestVariableEntry } from "@codingame/monaco-vscode-api/vscode/vs/workbench/contrib/chat/common/chatModel";
import { IInstantiationService } from "@codingame/monaco-vscode-api/vscode/vs/platform/instantiation/common/instantiation";
import { ChatInstructionAttachmentsModel } from "./chatAttachmentModel/chatInstructionAttachmentsModel.js";
export declare class ChatAttachmentModel extends Disposable {
    private readonly initService;
    readonly promptInstructions: ChatInstructionAttachmentsModel;
    constructor(initService: IInstantiationService);
    private _attachments;
    get attachments(): ReadonlyArray<IChatRequestVariableEntry>;
    protected _onDidChangeContext: Emitter<void>;
    readonly onDidChangeContext: import("@codingame/monaco-vscode-api/vscode/vs/base/common/event").Event<void>;
    get size(): number;
    getAttachmentIDs(): Set<string>;
    clear(): void;
    delete(...variableEntryIds: string[]): void;
    addFile(uri: URI, range?: IRange): void;
    asVariableEntry(uri: URI, range?: IRange, isMarkedReadonly?: boolean): IChatRequestVariableEntry;
    addContext(...attachments: IChatRequestVariableEntry[]): void;
    clearAndSetContext(...attachments: IChatRequestVariableEntry[]): void;
}
export declare class EditsAttachmentModel extends ChatAttachmentModel {
    private readonly _chatEditingService;
    private _onFileLimitExceeded;
    readonly onFileLimitExceeded: import("@codingame/monaco-vscode-api/vscode/vs/base/common/event").Event<void>;
    get fileAttachments(): IChatRequestVariableEntry[];
    private readonly _excludedFileAttachments;
    get excludedFileAttachments(): IChatRequestVariableEntry[];
    constructor(_chatEditingService: IChatEditingService, _initService: IInstantiationService);
    private isExcludeFileAttachment;
    addContext(...attachments: IChatRequestVariableEntry[]): void;
    clear(): void;
    delete(...variableEntryIds: string[]): void;
}
