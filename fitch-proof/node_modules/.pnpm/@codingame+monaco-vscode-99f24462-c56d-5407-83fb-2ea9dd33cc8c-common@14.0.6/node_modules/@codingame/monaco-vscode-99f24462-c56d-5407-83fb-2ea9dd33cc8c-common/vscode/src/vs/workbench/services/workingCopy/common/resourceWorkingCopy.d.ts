import { CancellationToken } from "@codingame/monaco-vscode-api/vscode/vs/base/common/cancellation";
import { Event } from "@codingame/monaco-vscode-api/vscode/vs/base/common/event";
import { Disposable, IDisposable } from "@codingame/monaco-vscode-api/vscode/vs/base/common/lifecycle";
import { URI } from "@codingame/monaco-vscode-api/vscode/vs/base/common/uri";
import { IFileService } from "@codingame/monaco-vscode-api/vscode/vs/platform/files/common/files.service";
import { ISaveOptions, IRevertOptions } from "@codingame/monaco-vscode-api/vscode/vs/workbench/common/editor";
import { IWorkingCopy, IWorkingCopyBackup, IWorkingCopySaveEvent, WorkingCopyCapabilities } from "@codingame/monaco-vscode-ce8c4b18-4e75-55dd-9656-517347af9de7-common/vscode/vs/workbench/services/workingCopy/common/workingCopy";
export interface IResourceWorkingCopy extends IWorkingCopy, IDisposable {
    readonly onDidChangeOrphaned: Event<void>;
    isOrphaned(): boolean;
    readonly onWillDispose: Event<void>;
    isDisposed(): boolean;
}
export declare abstract class ResourceWorkingCopy extends Disposable implements IResourceWorkingCopy {
    readonly resource: URI;
    protected readonly fileService: IFileService;
    constructor(resource: URI, fileService: IFileService);
    private readonly _onDidChangeOrphaned;
    readonly onDidChangeOrphaned: Event<void>;
    private orphaned;
    isOrphaned(): boolean;
    private onDidFilesChange;
    protected setOrphaned(orphaned: boolean): void;
    private readonly _onWillDispose;
    readonly onWillDispose: Event<void>;
    isDisposed(): boolean;
    dispose(): void;
    isModified(): boolean;
    abstract typeId: string;
    abstract name: string;
    abstract capabilities: WorkingCopyCapabilities;
    abstract onDidChangeDirty: Event<void>;
    abstract onDidChangeContent: Event<void>;
    abstract onDidSave: Event<IWorkingCopySaveEvent>;
    abstract isDirty(): boolean;
    abstract backup(token: CancellationToken): Promise<IWorkingCopyBackup>;
    abstract save(options?: ISaveOptions): Promise<boolean>;
    abstract revert(options?: IRevertOptions): Promise<void>;
}
